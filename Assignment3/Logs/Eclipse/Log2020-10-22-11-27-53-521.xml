<Events startTimestamp="1603391273521" logVersion="1.0.0.202008151525">
  <Command __id="0" _type="ShellCommand" date="Thu Oct 22 11:27:57 PDT 2020" starttimestamp="1603391273521" timestamp="3762" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2" _type="ShellCommand" date="Thu Oct 22 11:28:33 PDT 2020" starttimestamp="1603391273521" timestamp="40343" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3" _type="ShellCommand" date="Thu Oct 22 11:28:35 PDT 2020" starttimestamp="1603391273521" timestamp="41986" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4" _type="RunCommand" date="Thu Oct 22 11:28:35 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="42102" type="Run" />
  <Command __id="5" _type="EHExceptionCommand" date="Thu Oct 22 11:28:35 PDT 2020" starttimestamp="1603391273521" timestamp="42248" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval curryableInterpolatedSafe =
                                                     fn
                                                     : int
                                                        -> int -> int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="6" _type="EHExceptionCommand" date="Thu Oct 22 11:28:48 PDT 2020" starttimestamp="1603391273521" timestamp="54647" type="Exception">
    <outputString><![CDATA[curryableInterpolatedSafe;
]]></outputString>
  </Command>
  <Command __id="7" _type="EHExceptionCommand" date="Thu Oct 22 11:28:48 PDT 2020" starttimestamp="1603391273521" timestamp="54700" type="Exception">
    <outputString><![CDATA[val it = fn : int -> int -> int -> bool
- ]]></outputString>
  </Command>
  <Command __id="8" _type="EHExceptionCommand" date="Thu Oct 22 11:28:56 PDT 2020" starttimestamp="1603391273521" timestamp="62927" type="Exception">
    <outputString><![CDATA[curryableInterpolatedSafe 13 30 30;
]]></outputString>
  </Command>
  <Command __id="9" _type="EHExceptionCommand" date="Thu Oct 22 11:28:56 PDT 2020" starttimestamp="1603391273521" timestamp="62983" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
  <Command __id="10" _type="ShellCommand" date="Thu Oct 22 11:28:58 PDT 2020" starttimestamp="1603391273521" timestamp="64653" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="13" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 11:29:06 PDT 2020" docASTNodeCount="60" docActiveCodeLength="525" docExpressionCount="38" docLength="693" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="72556">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3Tests/src/test/RunF20A3Tests.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package test;

import grader.basics.execution.sml.SMLCommandGeneratorSelector;
import gradingTools.comp524f20.assignment3.F20Assignment3Suite;
//import trace.grader.basics.GraderBasicsTraceUtility;
//import util.trace.Tracer;

public class RunF20A3Tests {

	static final String PROJECT_LOCATION = "/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3";
	public static void main (String[] args) {
		
//		Tracer.showInfo(true);
//		GraderBasicsTraceUtility.setBufferTracedMessages(false);	
		F20Assignment3Suite.setProjectLocation(PROJECT_LOCATION);
		SMLCommandGeneratorSelector.getCommandGenerator().setUserBinary("/usr/local/smlnj/bin/sml");
		F20Assignment3Suite.main(args);

	}
}
]]></snapshot>
  </Command>
  <Command __id="36" _type="ShellCommand" date="Thu Oct 22 11:31:37 PDT 2020" starttimestamp="1603391273521" timestamp="224386" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="38" _type="ShellCommand" date="Thu Oct 22 11:31:47 PDT 2020" starttimestamp="1603391273521" timestamp="233590" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="39" _type="ShellCommand" date="Thu Oct 22 11:32:05 PDT 2020" starttimestamp="1603391273521" timestamp="251668" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="40" _type="ShellCommand" date="Thu Oct 22 11:33:11 PDT 2020" starttimestamp="1603391273521" timestamp="317487" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="41" _type="ShellCommand" date="Thu Oct 22 11:33:12 PDT 2020" starttimestamp="1603391273521" timestamp="318596" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="42" _type="RunCommand" date="Thu Oct 22 11:33:12 PDT 2020" kind="HitBreakPoint" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="318876" type="Run" />
  <Command __id="43" _type="RunCommand" date="Thu Oct 22 11:33:12 PDT 2020" kind="HitBreakPoint" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="318876" type="Run" />
  <Command __id="44" _type="EHExceptionCommand" date="Thu Oct 22 11:33:12 PDT 2020" starttimestamp="1603391273521" timestamp="319253" type="Exception">
    <outputString><![CDATA[Buffer traced messages =true
]]></outputString>
  </Command>
  <Command __id="45" _type="ShellCommand" date="Thu Oct 22 11:33:13 PDT 2020" starttimestamp="1603391273521" timestamp="319592" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="47" _type="RunCommand" date="Thu Oct 22 11:33:17 PDT 2020" kind="HitBreakPoint" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="323838" type="Run" />
  <Command __id="48" _type="RunCommand" date="Thu Oct 22 11:33:17 PDT 2020" kind="HitBreakPoint" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="323838" type="Run" />
  <Command __id="49" _type="ShellCommand" date="Thu Oct 22 11:33:17 PDT 2020" starttimestamp="1603391273521" timestamp="323911" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="50" _type="ShellCommand" date="Thu Oct 22 11:33:21 PDT 2020" starttimestamp="1603391273521" timestamp="328086" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="37" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 11:31:39 PDT 2020" docASTNodeCount="1" docActiveCodeLength="2486" docExpressionCount="0" docLength="2486" projectName="Assignment3" starttimestamp="1603391273521" timestamp="226148">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶	¶"), Diff(INSERT,"fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶"), Diff(EQUAL,"	¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
	
	
]]></snapshot>
  </Command>
  <Command __id="54" _type="RunCommand" date="Thu Oct 22 11:33:36 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="343208" type="Run" />
  <Command __id="56" _type="ShellCommand" date="Thu Oct 22 11:33:44 PDT 2020" starttimestamp="1603391273521" timestamp="351270" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="57" _type="ShellCommand" date="Thu Oct 22 11:33:45 PDT 2020" starttimestamp="1603391273521" timestamp="352353" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="58" _type="RunCommand" date="Thu Oct 22 11:33:45 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="352387" type="Run" />
  <Command __id="59" _type="EHExceptionCommand" date="Thu Oct 22 11:33:46 PDT 2020" starttimestamp="1603391273521" timestamp="352573" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval curryableInterpolatedSafe =
                                                     fn
                                                     : int
                                                        -> int -> int -> bool
val curriedOnceInterpolatedSafe = fn : int -> int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="60" _type="EHExceptionCommand" date="Thu Oct 22 11:33:55 PDT 2020" starttimestamp="1603391273521" timestamp="361717" type="Exception">
    <outputString><![CDATA[curriedOnceInterpolatedSafe;
]]></outputString>
  </Command>
  <Command __id="61" _type="EHExceptionCommand" date="Thu Oct 22 11:33:55 PDT 2020" starttimestamp="1603391273521" timestamp="361824" type="Exception">
    <outputString><![CDATA[val it = fn : int -> int -> bool
- ]]></outputString>
  </Command>
  <Command __id="62" _type="EHExceptionCommand" date="Thu Oct 22 11:34:05 PDT 2020" starttimestamp="1603391273521" timestamp="372077" type="Exception">
    <outputString><![CDATA[curriedOnceInterpolatedSafe 30 30;
]]></outputString>
  </Command>
  <Command __id="63" _type="EHExceptionCommand" date="Thu Oct 22 11:34:05 PDT 2020" starttimestamp="1603391273521" timestamp="372134" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
  <Command __id="64" _type="EHExceptionCommand" date="Thu Oct 22 11:34:11 PDT 2020" starttimestamp="1603391273521" timestamp="378448" type="Exception">
    <outputString><![CDATA[curriedOnceInterpolatedSafe 29 29;
]]></outputString>
  </Command>
  <Command __id="65" _type="EHExceptionCommand" date="Thu Oct 22 11:34:12 PDT 2020" starttimestamp="1603391273521" timestamp="378504" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
  <Command __id="55" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 11:33:39 PDT 2020" docASTNodeCount="1" docActiveCodeLength="2646" docExpressionCount="0" docLength="2646" projectName="Assignment3" starttimestamp="1603391273521" timestamp="345673">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶"), Diff(INSERT,"fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		currableInterpolatedSafe distance duration exhalation¶	end¶	¶"), Diff(EQUAL,"	¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		currableInterpolatedSafe distance duration exhalation
	end
	
	
	
]]></snapshot>
  </Command>
  <Command __id="68" _type="RunCommand" date="Thu Oct 22 11:34:23 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="389959" type="Run" />
  <Command __id="70" _type="ShellCommand" date="Thu Oct 22 11:35:16 PDT 2020" starttimestamp="1603391273521" timestamp="442719" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="71" _type="ShellCommand" date="Thu Oct 22 11:35:17 PDT 2020" starttimestamp="1603391273521" timestamp="443993" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="72" _type="RunCommand" date="Thu Oct 22 11:35:17 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="444026" type="Run" />
  <Command __id="73" _type="EHExceptionCommand" date="Thu Oct 22 11:35:17 PDT 2020" starttimestamp="1603391273521" timestamp="444177" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval curryableInterpolatedSafe =
                                                     fn
                                                     : int
                                                        -> int -> int -> bool
val curriedOnceInterpolatedSafe = fn : int -> int -> boolval curriedTwiceInterpolatedSafe =
                                                           fn : int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="74" _type="EHExceptionCommand" date="Thu Oct 22 11:35:27 PDT 2020" starttimestamp="1603391273521" timestamp="454203" type="Exception">
    <outputString><![CDATA[curriedTwiceInterpolatedSafe;
]]></outputString>
  </Command>
  <Command __id="75" _type="EHExceptionCommand" date="Thu Oct 22 11:35:27 PDT 2020" starttimestamp="1603391273521" timestamp="454309" type="Exception">
    <outputString><![CDATA[val it = fn : int -> bool
- ]]></outputString>
  </Command>
  <Command __id="76" _type="EHExceptionCommand" date="Thu Oct 22 11:35:38 PDT 2020" starttimestamp="1603391273521" timestamp="465201" type="Exception">
    <outputString><![CDATA[curriedTwiceInterpolatedSafe 29;
]]></outputString>
  </Command>
  <Command __id="77" _type="EHExceptionCommand" date="Thu Oct 22 11:35:38 PDT 2020" starttimestamp="1603391273521" timestamp="465258" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
  <Command __id="81" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 11:35:49 PDT 2020" docASTNodeCount="60" docActiveCodeLength="525" docExpressionCount="38" docLength="693" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="476111">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3Tests/src/test/RunF20A3Tests.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package test;¶¶import grader.basics.execution.sml.SMLCommandGeneratorSelector;¶import gradingTools.comp524f20.assignment3.F20Assignment3Suite;¶//import trace.grader.basics.GraderBasicsTraceUtility;¶//import util.trace.Tracer;¶¶public class RunF20A3Tests {¶¶	static final String PROJECT_LOCATION = "/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3";¶	public static void main (String[] args) {¶		¶//		Tracer.showInfo(true);¶//		GraderBasicsTraceUtility.setBufferTracedMessages(false);	¶		F20Assignment3Suite.setProjectLocation(PROJECT_LOCATION);¶		SMLCommandGeneratorSelector.getCommandGenerator().setUserBinary("/usr/local/smlnj/bin/sml");¶		F20Assignment3Suite.main(args);¶¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="99" _type="RunCommand" date="Thu Oct 22 11:36:06 PDT 2020" kind="HitBreakPoint" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="493045" type="Run" />
  <Command __id="100" _type="RunCommand" date="Thu Oct 22 11:36:06 PDT 2020" kind="HitBreakPoint" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="493045" type="Run" />
  <Command __id="101" _type="ShellCommand" date="Thu Oct 22 11:36:06 PDT 2020" starttimestamp="1603391273521" timestamp="493121" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="103" _type="ShellCommand" date="Thu Oct 22 11:36:30 PDT 2020" starttimestamp="1603391273521" timestamp="517333" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="104" _type="ShellCommand" date="Thu Oct 22 13:00:27 PDT 2020" starttimestamp="1603391273521" timestamp="5554197" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="105" _type="ShellCommand" date="Thu Oct 22 13:00:35 PDT 2020" starttimestamp="1603391273521" timestamp="5562135" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="106" _type="ShellCommand" date="Thu Oct 22 13:02:18 PDT 2020" starttimestamp="1603391273521" timestamp="5665064" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="107" _type="ShellCommand" date="Thu Oct 22 13:03:45 PDT 2020" starttimestamp="1603391273521" timestamp="5751680" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="108" _type="ShellCommand" date="Thu Oct 22 13:04:10 PDT 2020" starttimestamp="1603391273521" timestamp="5776544" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="109" _type="ShellCommand" date="Thu Oct 22 13:05:55 PDT 2020" starttimestamp="1603391273521" timestamp="5882343" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="110" _type="ShellCommand" date="Thu Oct 22 13:05:57 PDT 2020" starttimestamp="1603391273521" timestamp="5883670" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="111" _type="RunCommand" date="Thu Oct 22 13:05:57 PDT 2020" kind="HitBreakPoint" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="5883953" type="Run" />
  <Command __id="112" _type="RunCommand" date="Thu Oct 22 13:05:57 PDT 2020" kind="HitBreakPoint" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="5883953" type="Run" />
  <Command __id="113" _type="EHExceptionCommand" date="Thu Oct 22 13:05:57 PDT 2020" starttimestamp="1603391273521" timestamp="5884304" type="Exception">
    <outputString><![CDATA[Buffer traced messages =true
]]></outputString>
  </Command>
  <Command __id="114" _type="ShellCommand" date="Thu Oct 22 13:05:58 PDT 2020" starttimestamp="1603391273521" timestamp="5885082" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="115" _type="EHExceptionCommand" date="Thu Oct 22 13:05:59 PDT 2020" starttimestamp="1603391273521" timestamp="5886366" type="Exception">
    <outputString><![CDATA[ObjectEditor(Version 22, built on Sun Aug 23 09:32:35 EDT 2020). Copyright Prasun Dewan, 2012, All rights reserved. US Patent Appl. No.: 12/532,327
]]></outputString>
  </Command>
  <Command __id="116" _type="EHExceptionCommand" date="Thu Oct 22 13:06:06 PDT 2020" starttimestamp="1603391273521" timestamp="5893347" type="Exception">
    <outputString><![CDATA[Running junit test:ListDerivedSafeSML
Running junit test:SocialDistanceSMLProvided
]]></outputString>
  </Command>
  <Command __id="117" _type="ExceptionCommand" date="Thu Oct 22 13:06:07 PDT 2020" starttimestamp="1603391273521" timestamp="5893897" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: Stream closed
	at java.base/java.lang.ProcessBuilder$NullOutputStream.write(ProcessBuilder.java:442)
	at java.base/java.io.OutputStream.write(OutputStream.java:113)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:254)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:47)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:983)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:758)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:726)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:543)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:82)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:46)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:55)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:40)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:29)
	at gradingTools.comp524f20.assignment3.listsAndRecursion.ListDerivedSafeSML.test(ListDerivedSafeSML.java:149)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:108)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:98)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:290)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:266)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6592)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6354)
	at java.desktop/java.awt.Container.processEvent(Container.java:2261)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4966)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2319)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4798)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4914)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4552)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4484)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2305)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4798)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue.access$600(EventQueue.java:97)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:97)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
java.io.IOException: Stream closed
	at java.base/java.lang.ProcessBuilder$NullOutputStream.write(ProcessBuilder.java:442)
	at java.base/java.io.OutputStream.write(OutputStream.java:113)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/java.io.FilterOutputStream.close(FilterOutputStream.java:182)
	at java.base/sun.nio.cs.StreamEncoder.implClose(StreamEncoder.java:341)
	at java.base/sun.nio.cs.StreamEncoder.close(StreamEncoder.java:161)
	at java.base/java.io.OutputStreamWriter.close(OutputStreamWriter.java:258)
	at grader.basics.execution.ARunnerInputStreamProcessor.terminateInput(ARunnerInputStreamProcessor.java:57)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:984)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:758)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:726)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:543)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:82)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:46)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:55)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:40)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:29)
	at gradingTools.comp524f20.assignment3.listsAndRecursion.ListDerivedSafeSML.test(ListDerivedSafeSML.java:149)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:108)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:98)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:290)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:266)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6592)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6354)
	at java.desktop/java.awt.Container.processEvent(Container.java:2261)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4966)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2319)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4798)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4914)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4552)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4484)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2305)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4798)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue.access$600(EventQueue.java:97)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:97)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Testing ListDerivedSafeSML with the following inputs:
"print("Results:");" "listDerivedSafe(13,30,30);" "listDerivedSafe(6,30,10);" "listDerivedSafe(27,30,50);" "listDerivedSafe(13,15,50);" "listDerivedSafe(13,120,10);" "listDerivedSafe(27,120,30);" "listDerivedSafe(6,15,30);" 
"listDerivedSafe(14,30,30);" "listDerivedSafe(7,30,10);" "listDerivedSafe(27,29,50);" "listDerivedSafe(13,14,50);" "listDerivedSafe(13,120,9);" "listDerivedSafe(27,120,29);" "listDerivedSafe(7,15,30);" "listDerivedSafe(14,29,29);" 
"listDerivedSafe(7,29,9);" "listDerivedSafe(28,29,49);" "listDerivedSafe(14,14,49);" "listDerivedSafe(14,119,9);" "listDerivedSafe(28,119,29);" "listDerivedSafe(7,14,29);" "listDerivedSafe(26,30,30);" "listDerivedSafe(12,30,10);" 
"listDerivedSafe(27,16,50);" "listDerivedSafe(13,0,50);" "listDerivedSafe(13,120,0);" "listDerivedSafe(27,120,11);" "listDerivedSafe(12,15,30);" "listDerivedSafe(26,16,11);" "listDerivedSafe(12,16,0);" "listDerivedSafe(500,16,31);" 
"listDerivedSafe(26,0,31);" "listDerivedSafe(26,31,0);" "listDerivedSafe(500,31,11);" "listDerivedSafe(12,0,11);" "listDerivedSafe(6,15,10);" "listDerivedSafe(6,15,50);" "listDerivedSafe(6,30,30);" "listDerivedSafe(6,30,50);" 
"listDerivedSafe(6,120,10);" "listDerivedSafe(6,120,30);" "listDerivedSafe(6,120,50);" "listDerivedSafe(13,15,10);" "listDerivedSafe(13,15,30);" "listDerivedSafe(13,30,10);" "listDerivedSafe(13,30,50);" "listDerivedSafe(13,120,30);" 
"listDerivedSafe(13,120,50);" "listDerivedSafe(27,15,10);" "listDerivedSafe(27,15,30);" "listDerivedSafe(27,15,50);" "listDerivedSafe(27,30,10);" "listDerivedSafe(27,30,30);" "listDerivedSafe(27,120,10);" "listDerivedSafe(27,120,50);" 
"listDerivedSafe(27,500,50);" "listDerivedSafe(27,120,500);" "listDerivedSafe(5,15,30);" "listDerivedSafe(13,121,10);" "listDerivedSafe(27,120,31);" "listDerivedSafe(0,15,10);" "listDerivedSafe(6,15,500);" "listDerivedSafe(500,500,500);" 
"listDerivedSafe(128,128,128);" "listDerivedSafe(0,0,50);" "listDerivedSafe(13,0,51);" "listDerivedSafe(0,0,0);" "listDerivedSafe(20,22,50);" "listDerivedSafe(26,121,51);" 

Collected output:
java.lang.NullPointerException
	at gradingTools.comp524f20.assignment1.testcases.socialDistance.mains.AnAbstractRegexLineChecker.regexOutputChecks(AnAbstractRegexLineChecker.java:10)
	at gradingTools.comp524f20.assignment1.testcases.socialDistance.mains.AnAbstractRegexLineChecker.regexOutputChecks(AnAbstractRegexLineChecker.java:43)
	at gradingTools.comp524f20.assignment1.testcases.socialDistance.mains.AnAbstractRegexLineChecker.regexOutputChecks(AnAbstractRegexLineChecker.java:31)
	at gradingTools.comp524f20.assignment3.listsAndRecursion.ListDerivedSafeSML.test(ListDerivedSafeSML.java:158)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:108)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:98)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:290)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:266)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6592)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6354)
	at java.desktop/java.awt.Container.processEvent(Container.java:2261)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4966)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2319)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4798)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4914)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4552)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4484)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2305)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4798)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue.access$600(EventQueue.java:97)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:97)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
Test Failed:java.lang.NullPointerException null%0.0
Steps traced since last test:

]]></exceptionString>
  </Command>
  <Command __id="102" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 11:36:25 PDT 2020" docASTNodeCount="1" docActiveCodeLength="2797" docExpressionCount="0" docLength="2797" projectName="Assignment3" starttimestamp="1603391273521" timestamp="511968">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶"), Diff(INSERT,"fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	"), Diff(EQUAL,"	¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
		
	
]]></snapshot>
  </Command>
  <Command __id="122" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 13:06:12 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3248" docExpressionCount="0" docLength="3248" projectName="Assignment3" starttimestamp="1603391273521" timestamp="5899374">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end"), Diff(INSERT,"¶¶fun listDerivedSafe(distance, duration, exhalation) =¶	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)¶	¶fun¶	derivedListIteration(distance, duration, exhalation, nil) = () |¶	derivedListIteration(distance, duration, exhalation, (safeDist, safeDur, safeEx) :: tail) =¶	(¶		if(distance = safeDistance andalso duration = safeDur andalso safeEx) then¶			true¶		else¶			();¶		derivedListIteration(distance, duration, exhalation, tail)¶	)"), Diff(EQUAL,"¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶"), Diff(INSERT,""), Diff(EQUAL,"	end¶		¶		¶	"), Diff(DELETE,"	¶	"), Diff(EQUAL,"¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun listDerivedSafe(distance, duration, exhalation) =
	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)
	
fun
	derivedListIteration(distance, duration, exhalation, nil) = () |
	derivedListIteration(distance, duration, exhalation, (safeDist, safeDur, safeEx) :: tail) =
	(
		if(distance = safeDistance andalso duration = safeDur andalso safeEx) then
			true
		else
			();
		derivedListIteration(distance, duration, exhalation, tail)
	)
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="119" _type="RunCommand" date="Thu Oct 22 13:06:11 PDT 2020" kind="HitBreakPoint" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="5897747" type="Run" />
  <Command __id="120" _type="RunCommand" date="Thu Oct 22 13:06:11 PDT 2020" kind="HitBreakPoint" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="5897747" type="Run" />
  <Command __id="121" _type="ShellCommand" date="Thu Oct 22 13:06:11 PDT 2020" starttimestamp="1603391273521" timestamp="5897754" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="124" _type="ShellCommand" date="Thu Oct 22 13:06:21 PDT 2020" starttimestamp="1603391273521" timestamp="5908246" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="123" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 13:06:17 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3248" docExpressionCount="0" docLength="3248" projectName="Assignment3" starttimestamp="1603391273521" timestamp="5903600">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun listDerivedSafe(distance, duration, exhalation) =¶	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)¶	¶fun¶	derivedListIteration(distance, duration, exhalation, nil) = () |¶	derivedListIteration(distance, duration, exhalation, (safeDist, safeDur, safeEx) :: tail) =¶	(¶		if(distance = safeDistance andalso duration = safeDur andalso safeEx) then¶			true¶		else¶			();¶		derivedListIteration(distance, duration, exhalation, tail)¶	)¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
  </Command>
  <Command __id="125" _type="ShellCommand" date="Thu Oct 22 13:06:26 PDT 2020" starttimestamp="1603391273521" timestamp="5912722" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="126" _type="RunCommand" date="Thu Oct 22 13:06:26 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="5912748" type="Run" />
  <Command __id="127" _type="EHExceptionCommand" date="Thu Oct 22 13:06:26 PDT 2020" starttimestamp="1603391273521" timestamp="5912936" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
SocialDistance.sml:61.2-61.22 Error: unbound variable or constructor: derivedListIteration

SocialDistance.sml:67.17-67.29 Error: unbound variable or constructor: safeDistance

SocialDistance.sml:67.3-70.6 Error: types of if branches do not agree [tycon mismatch]
  then branch: bool
  else branch: unit
  in expression:
    if (distance = <errorvar>) andalso ((duration = safeDur) andalso safeEx)
  then true
  else ()

val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="129" _type="ShellCommand" date="Thu Oct 22 13:07:00 PDT 2020" starttimestamp="1603391273521" timestamp="5947070" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="128" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 13:06:48 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3248" docExpressionCount="0" docLength="3248" projectName="Assignment3" starttimestamp="1603391273521" timestamp="5935275">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun listDerivedSafe(distance, duration, exhalation) =¶	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)¶	¶fun¶	derivedListIteration(distance, duration, exhalation, nil) = () |¶	derivedListIteration(distance, duration, exhalation, (safeDist, safeDur, safeEx) :: tail) =¶	(¶		if(distance = safeDistance andalso duration = safeDur andalso safeEx) then¶			true¶		else¶			();¶		derivedListIteration(distance, duration, exhalation, tail)¶	)¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
  </Command>
  <Command __id="135" _type="RunCommand" date="Thu Oct 22 13:07:16 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="5962743" type="Run" />
  <Command __id="136" _type="ShellCommand" date="Thu Oct 22 13:07:22 PDT 2020" starttimestamp="1603391273521" timestamp="5969356" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="133" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 13:07:07 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3245" docExpressionCount="0" docLength="3245" projectName="Assignment3" starttimestamp="1603391273521" timestamp="5953952">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun listDerivedSafe(distance, duration, exhalation) =¶	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)¶	¶fun¶	derivedListIteration(distance, duration, exhalation, nil) = "), Diff(DELETE,"()"), Diff(INSERT,"false"), Diff(EQUAL," |¶	derivedListIteration(distance, duration, exhalation, (safeDist, safeDur, safeEx) :: tail) =¶	(¶		if(distance = safeDistance andalso duration = safeDur andalso safeEx) then¶			true¶		else¶			"), Diff(DELETE,"();¶		"), Diff(EQUAL,"derivedListIteration(distance, duration, exhalation, tail)¶	)¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun listDerivedSafe(distance, duration, exhalation) =
	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)
	
fun
	derivedListIteration(distance, duration, exhalation, nil) = false |
	derivedListIteration(distance, duration, exhalation, (safeDist, safeDur, safeEx) :: tail) =
	(
		if(distance = safeDistance andalso duration = safeDur andalso safeEx) then
			true
		else
			derivedListIteration(distance, duration, exhalation, tail)
	)
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="140" _type="RunCommand" date="Thu Oct 22 13:07:30 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="5976945" type="Run" />
  <Command __id="142" _type="ShellCommand" date="Thu Oct 22 13:07:37 PDT 2020" starttimestamp="1603391273521" timestamp="5984157" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="143" _type="ShellCommand" date="Thu Oct 22 13:07:40 PDT 2020" starttimestamp="1603391273521" timestamp="5986549" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="144" _type="RunCommand" date="Thu Oct 22 13:07:40 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="5986589" type="Run" />
  <Command __id="145" _type="EHExceptionCommand" date="Thu Oct 22 13:07:40 PDT 2020" starttimestamp="1603391273521" timestamp="5986724" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
SocialDistance.sml:61.2-61.22 Error: unbound variable or constructor: derivedListIteration

val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="141" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 13:07:32 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3241" docExpressionCount="0" docLength="3241" projectName="Assignment3" starttimestamp="1603391273521" timestamp="5979058">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun listDerivedSafe(distance, duration, exhalation) =¶	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)¶	¶fun¶	derivedListIteration(distance, duration, exhalation, nil) = false |¶	derivedListIteration(distance, duration, exhalation, (safeDist, safeDur, safeEx) :: tail) =¶	(¶		if(distance = safeDist"), Diff(DELETE,"ance"), Diff(EQUAL," andalso duration = safeDur andalso safeEx) then¶			true¶		else¶			derivedListIteration(distance, duration, exhalation, tail)¶	)¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun listDerivedSafe(distance, duration, exhalation) =
	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)
	
fun
	derivedListIteration(distance, duration, exhalation, nil) = false |
	derivedListIteration(distance, duration, exhalation, (safeDist, safeDur, safeEx) :: tail) =
	(
		if(distance = safeDist andalso duration = safeDur andalso safeEx) then
			true
		else
			derivedListIteration(distance, duration, exhalation, tail)
	)
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="148" _type="RunCommand" date="Thu Oct 22 13:07:53 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="6000073" type="Run" />
  <Command __id="150" _type="ShellCommand" date="Thu Oct 22 13:08:20 PDT 2020" starttimestamp="1603391273521" timestamp="6027020" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="151" _type="ShellCommand" date="Thu Oct 22 13:08:21 PDT 2020" starttimestamp="1603391273521" timestamp="6028122" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="152" _type="RunCommand" date="Thu Oct 22 13:08:21 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="6028161" type="Run" />
  <Command __id="153" _type="EHExceptionCommand" date="Thu Oct 22 13:08:21 PDT 2020" starttimestamp="1603391273521" timestamp="6028290" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
SocialDistance.sml:71.2-71.68 Error: operator and operand do not agree [tycon mismatch]
  operator domain: int * int * 'Z * (int * int * bool) list
  operand:         int * int * 'Z * (int * int * int) list
  in expression:
    derivedListIteration (distance,duration,exhalation,SAFETY_TABLE)

val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="156" _type="RunCommand" date="Thu Oct 22 13:08:32 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="6038655" type="Run" />
  <Command __id="157" _type="ShellCommand" date="Thu Oct 22 13:08:50 PDT 2020" starttimestamp="1603391273521" timestamp="6056850" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="158" _type="ShellCommand" date="Thu Oct 22 13:10:28 PDT 2020" starttimestamp="1603391273521" timestamp="6155262" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="160" _type="ShellCommand" date="Thu Oct 22 13:10:48 PDT 2020" starttimestamp="1603391273521" timestamp="6174648" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="161" _type="ShellCommand" date="Thu Oct 22 13:10:49 PDT 2020" starttimestamp="1603391273521" timestamp="6176016" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="162" _type="RunCommand" date="Thu Oct 22 13:10:49 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="6176062" type="Run" />
  <Command __id="163" _type="EHExceptionCommand" date="Thu Oct 22 13:10:49 PDT 2020" starttimestamp="1603391273521" timestamp="6176249" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
SocialDistance.sml:61.2-61.22 Error: unbound variable or constructor: derivedListIteration

val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="149" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 13:07:58 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3241" docExpressionCount="0" docLength="3241" projectName="Assignment3" starttimestamp="1603391273521" timestamp="6005296">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun listDerivedSafe(distance, duration, exhalation) =¶	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)¶	¶fun¶	derivedListIteration(distance, duration, exhalation, nil) = false |¶	derivedListIteration(distance, duration, exhalation, (safeDist, safeDur, safeEx) :: tail) =¶	(¶		if(distance = safeDist andalso duration = safeDur andalso safeEx) then¶			true¶		else¶			derivedListIteration(distance, duration, exhalation, tail)¶	)¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
  </Command>
  <Command __id="159" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 13:10:28 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3240" docExpressionCount="0" docLength="3240" projectName="Assignment3" starttimestamp="1603391273521" timestamp="6155332">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶"), Diff(DELETE,"fun listDerivedSafe(distance, duration, exhalation) =¶	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)¶	¶"), Diff(EQUAL,"fun¶	derivedListIteration(distance, duration, exhalation, nil) = false |¶	derivedListIteration(distance, duration, exhalation, (safeDist, safeDur, safeEx) :: tail) =¶	(¶		if(distance = safeDist andalso duration = safeDur andalso safeEx) then¶			true¶		else¶			derivedListIteration(distance, duration, exhalation, tail)¶	)"), Diff(INSERT,"¶¶fun listDerivedSafe(distance, duration, exhalation) =¶	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)"), Diff(EQUAL,"¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun
	derivedListIteration(distance, duration, exhalation, nil) = false |
	derivedListIteration(distance, duration, exhalation, (safeDist, safeDur, safeEx) :: tail) =
	(
		if(distance = safeDist andalso duration = safeDur andalso safeEx) then
			true
		else
			derivedListIteration(distance, duration, exhalation, tail)
	)

fun listDerivedSafe(distance, duration, exhalation) =
	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="166" _type="RunCommand" date="Thu Oct 22 13:11:02 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="6188849" type="Run" />
  <Command __id="168" _type="ShellCommand" date="Thu Oct 22 13:11:16 PDT 2020" starttimestamp="1603391273521" timestamp="6202979" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="169" _type="ShellCommand" date="Thu Oct 22 13:11:17 PDT 2020" starttimestamp="1603391273521" timestamp="6204447" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="170" _type="RunCommand" date="Thu Oct 22 13:11:18 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="6204481" type="Run" />
  <Command __id="171" _type="EHExceptionCommand" date="Thu Oct 22 13:11:18 PDT 2020" starttimestamp="1603391273521" timestamp="6204617" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval listDerivedSafe = fn
                                                     : 'a * 'b * 'c -> boolval curryableInterpolatedSafe =
                                                                             fn
                                                                             : 
                                                                                  int
                                                                                -> 
                                                                                  int
                                                                                -> 
                                                                                  int
                                                                                -> 
                                                                                  bool
val curriedOnceInterpolatedSafe = fn : int -> int -> boolval curriedTwiceInterpolatedSafe =
                                                           fn : int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="172" _type="EHExceptionCommand" date="Thu Oct 22 13:11:27 PDT 2020" starttimestamp="1603391273521" timestamp="6213525" type="Exception">
    <outputString><![CDATA[curryableInterpolatedSafe;
]]></outputString>
  </Command>
  <Command __id="173" _type="EHExceptionCommand" date="Thu Oct 22 13:11:27 PDT 2020" starttimestamp="1603391273521" timestamp="6213631" type="Exception">
    <outputString><![CDATA[val it = fn : int -> int -> int -> bool
- ]]></outputString>
  </Command>
  <Command __id="174" _type="EHExceptionCommand" date="Thu Oct 22 13:11:37 PDT 2020" starttimestamp="1603391273521" timestamp="6224299" type="Exception">
    <outputString><![CDATA[curryableInterpolatedSafe 980000 99 98
]]></outputString>
  </Command>
  <Command __id="167" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 13:11:06 PDT 2020" docASTNodeCount="1" docActiveCodeLength="2917" docExpressionCount="0" docLength="2917" projectName="Assignment3" starttimestamp="1603391273521" timestamp="6192973">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶"), Diff(DELETE,"fun¶	derivedListIteration(distance, duration, exhalation, nil) = false |¶	derivedListIteration(distance, duration, exhalation, (safeDist, safeDur, safeEx) :: tail) =¶	(¶		if(distance = safeDist andalso duration = safeDur andalso safeEx) then¶			true¶		else¶			derivedListIteration(distance, duration, exhalation, tail)¶	)¶¶"), Diff(EQUAL,"fun listDerivedSafe(distance, duration, exhalation) =¶	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun listDerivedSafe(distance, duration, exhalation) =
	derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="177" _type="RunCommand" date="Thu Oct 22 13:11:46 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="6232680" type="Run" />
  <Command __id="179" _type="ShellCommand" date="Thu Oct 22 13:11:50 PDT 2020" starttimestamp="1603391273521" timestamp="6237450" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="180" _type="ShellCommand" date="Thu Oct 22 13:13:18 PDT 2020" starttimestamp="1603391273521" timestamp="6324816" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="181" _type="ShellCommand" date="Thu Oct 22 13:14:19 PDT 2020" starttimestamp="1603391273521" timestamp="6386007" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="182" _type="ShellCommand" date="Thu Oct 22 13:14:38 PDT 2020" starttimestamp="1603391273521" timestamp="6404713" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="183" _type="ShellCommand" date="Thu Oct 22 13:16:30 PDT 2020" starttimestamp="1603391273521" timestamp="6517468" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="184" _type="ShellCommand" date="Thu Oct 22 13:17:21 PDT 2020" starttimestamp="1603391273521" timestamp="6568289" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="185" _type="ShellCommand" date="Thu Oct 22 13:18:13 PDT 2020" starttimestamp="1603391273521" timestamp="6619987" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="178" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 13:11:48 PDT 2020" docASTNodeCount="1" docActiveCodeLength="2855" docExpressionCount="0" docLength="2855" projectName="Assignment3" starttimestamp="1603391273521" timestamp="6234711">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun listDerivedSafe(distance, duration, exhalation) =¶	"), Diff(DELETE,"derivedListIteration(distance, duration, exhalation, SAFETY_TABLE)"), Diff(INSERT,"true"), Diff(EQUAL,"¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun listDerivedSafe(distance, duration, exhalation) =
	true
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="186" _type="ShellCommand" date="Thu Oct 22 13:18:15 PDT 2020" starttimestamp="1603391273521" timestamp="6621839" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="187" _type="RunCommand" date="Thu Oct 22 13:18:15 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="6621890" type="Run" />
  <Command __id="188" _type="ExceptionCommand" date="Thu Oct 22 13:18:15 PDT 2020" starttimestamp="1603391273521" timestamp="6622030" type="Exception">
    <exceptionString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
SocialDistance.sml:62.53 Error: syntax error: inserting  RPAREN

SocialDistance.sml:68.2 Error: syntax error: inserting  EQUALOP

[unexpected exception: Compile]

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:19.24-19.46
             ../compiler/TopLevel/interact/evalloop.sml:45.54
             ../compiler/TopLevel/interact/evalloop.sml:306.20-306.23
             ../compiler/TopLevel/interact/interact.sml:65.13-65.16
- ]]></exceptionString>
  </Command>
  <Command __id="190" _type="ShellCommand" date="Thu Oct 22 13:18:57 PDT 2020" starttimestamp="1603391273521" timestamp="6664094" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="191" _type="ShellCommand" date="Thu Oct 22 13:18:59 PDT 2020" starttimestamp="1603391273521" timestamp="6665587" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="192" _type="RunCommand" date="Thu Oct 22 13:18:59 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="6665628" type="Run" />
  <Command __id="193" _type="EHExceptionCommand" date="Thu Oct 22 13:18:59 PDT 2020" starttimestamp="1603391273521" timestamp="6665764" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val curryableInterpolatedSafe = fn : int -> int -> int -> bool
val curriedOnceInterpolatedSafe = fn : int -> int -> boolval curriedTwiceInterpolatedSafe =
                                                           fn : int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="194" _type="EHExceptionCommand" date="Thu Oct 22 13:19:10 PDT 2020" starttimestamp="1603391273521" timestamp="6677379" type="Exception">
    <outputString><![CDATA[derivedIteration;
]]></outputString>
  </Command>
  <Command __id="195" _type="EHExceptionCommand" date="Thu Oct 22 13:19:10 PDT 2020" starttimestamp="1603391273521" timestamp="6677434" type="Exception">
    <outputString><![CDATA[val it = fn : int * int * int * (int * int * int) list -> bool
- ]]></outputString>
  </Command>
  <Command __id="196" _type="EHExceptionCommand" date="Thu Oct 22 13:19:40 PDT 2020" starttimestamp="1603391273521" timestamp="6707407" type="Exception">
    <outputString><![CDATA[derivedIteration(13, 30, 30, [(12, 29, 29), (13, 30, 30)];
]]></outputString>
  </Command>
  <Command __id="199" _type="RunCommand" date="Thu Oct 22 13:19:49 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="6716326" type="Run" />
  <Command __id="200" _type="ShellCommand" date="Thu Oct 22 13:19:58 PDT 2020" starttimestamp="1603391273521" timestamp="6724704" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="201" _type="ShellCommand" date="Thu Oct 22 13:19:59 PDT 2020" starttimestamp="1603391273521" timestamp="6726315" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="202" _type="RunCommand" date="Thu Oct 22 13:19:59 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="6726356" type="Run" />
  <Command __id="203" _type="EHExceptionCommand" date="Thu Oct 22 13:20:00 PDT 2020" starttimestamp="1603391273521" timestamp="6726482" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val curryableInterpolatedSafe = fn : int -> int -> int -> bool
val curriedOnceInterpolatedSafe = fn : int -> int -> boolval curriedTwiceInterpolatedSafe =
                                                           fn : int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="189" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 13:18:23 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3139" docExpressionCount="0" docLength="3139" projectName="Assignment3" starttimestamp="1603391273521" timestamp="6629528">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun"), Diff(DELETE," listDerivedSafe(distance, duration, exhalation) =¶	true"), Diff(INSERT,"¶	derivedIteration (distance, duration, exhalation, nil) = false |¶	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail) =¶	(¶		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then¶			true¶		else¶			derivedIteration (distance, duration, exhalation, safetyTail);¶	)"), Diff(EQUAL,"¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun
	derivedIteration (distance, duration, exhalation, nil) = false |
	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail) =
	(
		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then
			true
		else
			derivedIteration (distance, duration, exhalation, safetyTail);
	)
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="206" _type="RunCommand" date="Thu Oct 22 13:20:24 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="6751055" type="Run" />
  <Command __id="208" _type="ShellCommand" date="Thu Oct 22 13:20:49 PDT 2020" starttimestamp="1603391273521" timestamp="6775977" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="209" _type="ShellCommand" date="Thu Oct 22 13:20:51 PDT 2020" starttimestamp="1603391273521" timestamp="6777948" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="210" _type="ShellCommand" date="Thu Oct 22 13:21:22 PDT 2020" starttimestamp="1603391273521" timestamp="6808604" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="211" _type="ShellCommand" date="Thu Oct 22 13:22:41 PDT 2020" starttimestamp="1603391273521" timestamp="6887487" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="212" _type="ShellCommand" date="Thu Oct 22 13:23:08 PDT 2020" starttimestamp="1603391273521" timestamp="6914514" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="213" _type="ShellCommand" date="Thu Oct 22 13:23:09 PDT 2020" starttimestamp="1603391273521" timestamp="6915828" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="214" _type="RunCommand" date="Thu Oct 22 13:23:09 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="6915869" type="Run" />
  <Command __id="215" _type="EHExceptionCommand" date="Thu Oct 22 13:23:09 PDT 2020" starttimestamp="1603391273521" timestamp="6916016" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val listDerivedSafe = fn : int * int * int -> bool
val curryableInterpolatedSafe = fn : int -> int -> int -> bool
val curriedOnceInterpolatedSafe = fn : int -> int -> boolval curriedTwiceInterpolatedSafe =
                                                           fn : int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="216" _type="EHExceptionCommand" date="Thu Oct 22 13:23:14 PDT 2020" starttimestamp="1603391273521" timestamp="6921441" type="Exception">
    <outputString><![CDATA[listDerivedSafe;
]]></outputString>
  </Command>
  <Command __id="217" _type="EHExceptionCommand" date="Thu Oct 22 13:23:15 PDT 2020" starttimestamp="1603391273521" timestamp="6921495" type="Exception">
    <outputString><![CDATA[val it = fn : int * int * int -> bool
- ]]></outputString>
  </Command>
  <Command __id="218" _type="EHExceptionCommand" date="Thu Oct 22 13:23:25 PDT 2020" starttimestamp="1603391273521" timestamp="6932211" type="Exception">
    <outputString><![CDATA[listDerivedSafe(13, 29, 29);
]]></outputString>
  </Command>
  <Command __id="219" _type="EHExceptionCommand" date="Thu Oct 22 13:23:25 PDT 2020" starttimestamp="1603391273521" timestamp="6932268" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
  <Command __id="220" _type="EHExceptionCommand" date="Thu Oct 22 13:23:32 PDT 2020" starttimestamp="1603391273521" timestamp="6938666" type="Exception">
    <outputString><![CDATA[listDerivedSafe(13, 31, 31);
]]></outputString>
  </Command>
  <Command __id="221" _type="EHExceptionCommand" date="Thu Oct 22 13:23:32 PDT 2020" starttimestamp="1603391273521" timestamp="6938771" type="Exception">
    <outputString><![CDATA[val it = false : bool
- ]]></outputString>
  </Command>
  <Command __id="238" _type="ShellCommand" date="Thu Oct 22 13:35:40 PDT 2020" starttimestamp="1603391273521" timestamp="7666737" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="240" _type="ShellCommand" date="Thu Oct 22 13:35:52 PDT 2020" starttimestamp="1603391273521" timestamp="7679315" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="241" _type="ShellCommand" date="Thu Oct 22 15:58:12 PDT 2020" starttimestamp="1603391273521" timestamp="16219383" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="242" _type="ShellCommand" date="Thu Oct 22 15:58:18 PDT 2020" starttimestamp="1603391273521" timestamp="16224744" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="243" _type="ShellCommand" date="Thu Oct 22 15:58:24 PDT 2020" starttimestamp="1603391273521" timestamp="16230648" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="244" _type="ShellCommand" date="Thu Oct 22 15:59:02 PDT 2020" starttimestamp="1603391273521" timestamp="16269259" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="245" _type="ShellCommand" date="Thu Oct 22 15:59:05 PDT 2020" starttimestamp="1603391273521" timestamp="16272477" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="246" _type="RunCommand" date="Thu Oct 22 15:59:06 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="16272547" type="Run" />
  <Command __id="247" _type="EHExceptionCommand" date="Thu Oct 22 15:59:06 PDT 2020" starttimestamp="1603391273521" timestamp="16272733" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val listDerivedSafe = fn : int * int * int -> bool
SocialDistance.sml:71.18-71.64 Error: non-constructor applied to argument in pattern: safetyComputer

val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="248" _type="ShellCommand" date="Thu Oct 22 15:59:10 PDT 2020" starttimestamp="1603391273521" timestamp="16277293" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="249" _type="ShellCommand" date="Thu Oct 22 15:59:10 PDT 2020" starttimestamp="1603391273521" timestamp="16277343" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="250" _type="ShellCommand" date="Thu Oct 22 15:59:12 PDT 2020" starttimestamp="1603391273521" timestamp="16278564" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="251" _type="ShellCommand" date="Thu Oct 22 15:59:29 PDT 2020" starttimestamp="1603391273521" timestamp="16295807" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="253" _type="ShellCommand" date="Thu Oct 22 15:59:46 PDT 2020" starttimestamp="1603391273521" timestamp="16313289" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="254" _type="ShellCommand" date="Thu Oct 22 15:59:47 PDT 2020" starttimestamp="1603391273521" timestamp="16314188" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="255" _type="RunCommand" date="Thu Oct 22 15:59:47 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="16314226" type="Run" />
  <Command __id="256" _type="EHExceptionCommand" date="Thu Oct 22 15:59:47 PDT 2020" starttimestamp="1603391273521" timestamp="16314387" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val listDerivedSafe = fn : int * int * int -> bool
val printSafety = fn : ('a * 'b * 'c -> 'd) * 'a * 'b * 'c -> 'dval curryableInterpolatedSafe =
                                                                  fn
                                                                  : int
                                                                     -> int
                                                                     -> int
                                                                     -> bool
val curriedOnceInterpolatedSafe = fn : int -> int -> boolval curriedTwiceInterpolatedSafe =
                                                           fn : int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="257" _type="ShellCommand" date="Thu Oct 22 15:59:57 PDT 2020" starttimestamp="1603391273521" timestamp="16324245" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="261" _type="RunCommand" date="Thu Oct 22 16:00:13 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="16339973" type="Run" />
  <Command __id="262" _type="ShellCommand" date="Thu Oct 22 16:00:18 PDT 2020" starttimestamp="1603391273521" timestamp="16344695" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="263" _type="ShellCommand" date="Thu Oct 22 16:00:19 PDT 2020" starttimestamp="1603391273521" timestamp="16346063" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="264" _type="RunCommand" date="Thu Oct 22 16:00:19 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="16346101" type="Run" />
  <Command __id="265" _type="EHExceptionCommand" date="Thu Oct 22 16:00:19 PDT 2020" starttimestamp="1603391273521" timestamp="16346223" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val listDerivedSafe = fn : int * int * int -> bool
val printSafety = fn : ('a * 'b * 'c -> 'd) * ('a * 'b * 'c) -> 'dval curryableInterpolatedSafe =
                                                                    fn
                                                                    : int
                                                                       -> int
                                                                       -> int
                                                                       -> bool
val curriedOnceInterpolatedSafe = fn : int -> int -> boolval curriedTwiceInterpolatedSafe =
                                                           fn : int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="266" _type="EHExceptionCommand" date="Thu Oct 22 16:00:32 PDT 2020" starttimestamp="1603391273521" timestamp="16359123" type="Exception">
    <outputString><![CDATA[printSafety;
]]></outputString>
  </Command>
  <Command __id="267" _type="EHExceptionCommand" date="Thu Oct 22 16:00:32 PDT 2020" starttimestamp="1603391273521" timestamp="16359180" type="Exception">
    <outputString><![CDATA[val it = fn : ('a * 'b * 'c -> 'd) * ('a * 'b * 'c) -> 'd
- ]]></outputString>
  </Command>
  <Command __id="268" _type="EHExceptionCommand" date="Thu Oct 22 16:00:50 PDT 2020" starttimestamp="1603391273521" timestamp="16376769" type="Exception">
    <outputString><![CDATA[val testFeatures = (28, 29, 29);
]]></outputString>
  </Command>
  <Command __id="269" _type="EHExceptionCommand" date="Thu Oct 22 16:00:50 PDT 2020" starttimestamp="1603391273521" timestamp="16376825" type="Exception">
    <outputString><![CDATA[val testFeatures = (28,29,29) : int * int * int
- ]]></outputString>
  </Command>
  <Command __id="225" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 13:23:42 PDT 2020" docASTNodeCount="60" docActiveCodeLength="525" docExpressionCount="38" docLength="693" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="6949139">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3Tests/src/test/RunF20A3Tests.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package test;¶¶import grader.basics.execution.sml.SMLCommandGeneratorSelector;¶import gradingTools.comp524f20.assignment3.F20Assignment3Suite;¶//import trace.grader.basics.GraderBasicsTraceUtility;¶//import util.trace.Tracer;¶¶public class RunF20A3Tests {¶¶	static final String PROJECT_LOCATION = "/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3";¶	public static void main (String[] args) {¶		¶//		Tracer.showInfo(true);¶//		GraderBasicsTraceUtility.setBufferTracedMessages(false);	¶		F20Assignment3Suite.setProjectLocation(PROJECT_LOCATION);¶		SMLCommandGeneratorSelector.getCommandGenerator().setUserBinary("/usr/local/smlnj/bin/sml");¶		F20Assignment3Suite.main(args);¶¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="239" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 13:35:40 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3256" docExpressionCount="0" docLength="3256" projectName="Assignment3" starttimestamp="1603391273521" timestamp="7666959">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun¶	derivedIteration (distance, duration, exhalation, nil) = false |¶	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =¶		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then¶			true¶		else¶			derivedIteration (distance, duration, exhalation, safetyTail);¶	¶"), Diff(INSERT,"fun listDerivedSafe (distance, duration, exhalation) =¶	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);¶"), Diff(EQUAL,"	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun
	derivedIteration (distance, duration, exhalation, nil) = false |
	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =
		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then
			true
		else
			derivedIteration (distance, duration, exhalation, safetyTail);
	
fun listDerivedSafe (distance, duration, exhalation) =
	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="252" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 15:59:29 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3364" docExpressionCount="0" docLength="3364" projectName="Assignment3" starttimestamp="1603391273521" timestamp="16295872">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun¶	derivedIteration (distance, duration, exhalation, nil) = false |¶	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =¶		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then¶			true¶		else¶			derivedIteration (distance, duration, exhalation, safetyTail);¶	¶fun listDerivedSafe (distance, duration, exhalation) =¶	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);¶	¶"), Diff(INSERT,"fun printSafety (safetyComputer(distance, duration, exhalation), distance, duration, exhalation) =¶	true	¶	¶"), Diff(EQUAL,"fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun
	derivedIteration (distance, duration, exhalation, nil) = false |
	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =
		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then
			true
		else
			derivedIteration (distance, duration, exhalation, safetyTail);
	
fun listDerivedSafe (distance, duration, exhalation) =
	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);
	
fun printSafety (safetyComputer(distance, duration, exhalation), distance, duration, exhalation) =
	true	
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="259" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 16:00:02 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3374" docExpressionCount="0" docLength="3374" projectName="Assignment3" starttimestamp="1603391273521" timestamp="16328942">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun¶	derivedIteration (distance, duration, exhalation, nil) = false |¶	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =¶		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then¶			true¶		else¶			derivedIteration (distance, duration, exhalation, safetyTail);¶	¶fun listDerivedSafe (distance, duration, exhalation) =¶	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);¶	¶fun printSafety (safetyComputer"), Diff(DELETE,"("), Diff(INSERT,", "), Diff(EQUAL,"distance, duration, exhalation)"), Diff(DELETE,","), Diff(EQUAL," "), Diff(INSERT,"=¶	safetyComputer("), Diff(EQUAL,"distance, duration, exhalation)"), Diff(DELETE," =¶	true"), Diff(EQUAL,"	¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun
	derivedIteration (distance, duration, exhalation, nil) = false |
	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =
		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then
			true
		else
			derivedIteration (distance, duration, exhalation, safetyTail);
	
fun listDerivedSafe (distance, duration, exhalation) =
	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);
	
fun printSafety (safetyComputer, distance, duration, exhalation) =
	safetyComputer(distance, duration, exhalation)	
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="272" _type="RunCommand" date="Thu Oct 22 16:01:10 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="16396652" type="Run" />
  <Command __id="274" _type="ShellCommand" date="Thu Oct 22 16:01:13 PDT 2020" starttimestamp="1603391273521" timestamp="16400058" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="273" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 16:01:11 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3376" docExpressionCount="0" docLength="3376" projectName="Assignment3" starttimestamp="1603391273521" timestamp="16397700">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun¶	derivedIteration (distance, duration, exhalation, nil) = false |¶	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =¶		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then¶			true¶		else¶			derivedIteration (distance, duration, exhalation, safetyTail);¶	¶fun listDerivedSafe (distance, duration, exhalation) =¶	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);¶	¶fun printSafety (safetyComputer, "), Diff(INSERT,"("), Diff(EQUAL,"distance, duration, exhalation)"), Diff(INSERT,")"), Diff(EQUAL," =¶	safetyComputer(distance, duration, exhalation)	¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun
	derivedIteration (distance, duration, exhalation, nil) = false |
	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =
		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then
			true
		else
			derivedIteration (distance, duration, exhalation, safetyTail);
	
fun listDerivedSafe (distance, duration, exhalation) =
	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);
	
fun printSafety (safetyComputer, (distance, duration, exhalation)) =
	safetyComputer(distance, duration, exhalation)	
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="275" _type="ShellCommand" date="Thu Oct 22 16:01:33 PDT 2020" starttimestamp="1603391273521" timestamp="16420469" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="277" _type="ShellCommand" date="Thu Oct 22 16:01:48 PDT 2020" starttimestamp="1603391273521" timestamp="16434812" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="278" _type="ShellCommand" date="Thu Oct 22 16:01:53 PDT 2020" starttimestamp="1603391273521" timestamp="16439796" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="279" _type="ShellCommand" date="Thu Oct 22 16:02:25 PDT 2020" starttimestamp="1603391273521" timestamp="16472425" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="280" _type="ShellCommand" date="Thu Oct 22 16:03:01 PDT 2020" starttimestamp="1603391273521" timestamp="16508190" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="281" _type="ShellCommand" date="Thu Oct 22 16:03:03 PDT 2020" starttimestamp="1603391273521" timestamp="16510144" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="282" _type="ShellCommand" date="Thu Oct 22 16:03:29 PDT 2020" starttimestamp="1603391273521" timestamp="16536293" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="283" _type="ShellCommand" date="Thu Oct 22 16:03:36 PDT 2020" starttimestamp="1603391273521" timestamp="16543447" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="284" _type="ShellCommand" date="Thu Oct 22 16:03:41 PDT 2020" starttimestamp="1603391273521" timestamp="16547863" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="285" _type="ShellCommand" date="Thu Oct 22 16:04:26 PDT 2020" starttimestamp="1603391273521" timestamp="16593033" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="286" _type="ShellCommand" date="Thu Oct 22 16:04:29 PDT 2020" starttimestamp="1603391273521" timestamp="16595634" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="287" _type="ShellCommand" date="Thu Oct 22 16:04:37 PDT 2020" starttimestamp="1603391273521" timestamp="16603682" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="288" _type="ShellCommand" date="Thu Oct 22 16:05:06 PDT 2020" starttimestamp="1603391273521" timestamp="16632494" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="289" _type="ShellCommand" date="Thu Oct 22 16:05:27 PDT 2020" starttimestamp="1603391273521" timestamp="16654451" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="290" _type="ShellCommand" date="Thu Oct 22 16:05:28 PDT 2020" starttimestamp="1603391273521" timestamp="16655327" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="291" _type="RunCommand" date="Thu Oct 22 16:05:28 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="16655386" type="Run" />
  <Command __id="292" _type="EHExceptionCommand" date="Thu Oct 22 16:05:29 PDT 2020" starttimestamp="1603391273521" timestamp="16655497" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val listDerivedSafe = fn : int * int * int -> bool
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val printSafety = fn : (int * int * int -> bool) * (int * int * int) -> unitval curryableInterpolatedSafe =
                                                                              fn
                                                                              : 
                                                                                   int
                                                                                 -> 
                                                                                   int
                                                                                 -> 
                                                                                   int
                                                                                 -> 
                                                                                   bool
]]></outputString>
  </Command>
  <Command __id="293" _type="EHExceptionCommand" date="Thu Oct 22 16:05:29 PDT 2020" starttimestamp="1603391273521" timestamp="16655554" type="Exception">
    <outputString><![CDATA[val curriedOnceInterpolatedSafe = fn : int -> int -> boolval curriedTwiceInterpolatedSafe =
                                                           fn : int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="294" _type="EHExceptionCommand" date="Thu Oct 22 16:05:36 PDT 2020" starttimestamp="1603391273521" timestamp="16663388" type="Exception">
    <outputString><![CDATA[printSafety;
]]></outputString>
  </Command>
  <Command __id="295" _type="EHExceptionCommand" date="Thu Oct 22 16:05:37 PDT 2020" starttimestamp="1603391273521" timestamp="16663492" type="Exception">
    <outputString><![CDATA[val it = fn : (int * int * int -> bool) * (int * int * int) -> unit
- ]]></outputString>
  </Command>
  <Command __id="296" _type="EHExceptionCommand" date="Thu Oct 22 16:05:47 PDT 2020" starttimestamp="1603391273521" timestamp="16673653" type="Exception">
    <outputString><![CDATA[val testFeatures = (28, 29, 29);
]]></outputString>
  </Command>
  <Command __id="297" _type="EHExceptionCommand" date="Thu Oct 22 16:05:47 PDT 2020" starttimestamp="1603391273521" timestamp="16673707" type="Exception">
    <outputString><![CDATA[val testFeatures = (28,29,29) : int * int * int
- ]]></outputString>
  </Command>
  <Command __id="276" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 16:01:36 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3376" docExpressionCount="0" docLength="3376" projectName="Assignment3" starttimestamp="1603391273521" timestamp="16423262">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun¶	derivedIteration (distance, duration, exhalation, nil) = false |¶	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =¶		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then¶			true¶		else¶			derivedIteration (distance, duration, exhalation, safetyTail);¶	¶fun listDerivedSafe (distance, duration, exhalation) =¶	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);¶	¶fun printSafety (safetyComputer, (distance, duration, exhalation)) =¶	safetyComputer(distance, duration, exhalation)	¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
  </Command>
  <Command __id="298" _type="EHExceptionCommand" date="Thu Oct 22 16:06:00 PDT 2020" starttimestamp="1603391273521" timestamp="16687471" type="Exception">
    <outputString><![CDATA[printSafety (interpolatedSafe, testFeatures);
]]></outputString>
  </Command>
  <Command __id="299" _type="EHExceptionCommand" date="Thu Oct 22 16:06:01 PDT 2020" starttimestamp="1603391273521" timestamp="16687526" type="Exception">
    <outputString><![CDATA[Distance:28 Duration:29 Exhalation:29 Safe:falseval it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="301" _type="ShellCommand" date="Thu Oct 22 16:06:16 PDT 2020" starttimestamp="1603391273521" timestamp="16703348" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="302" _type="ShellCommand" date="Thu Oct 22 16:06:18 PDT 2020" starttimestamp="1603391273521" timestamp="16704892" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="303" _type="RunCommand" date="Thu Oct 22 16:06:18 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="16704940" type="Run" />
  <Command __id="304" _type="EHExceptionCommand" date="Thu Oct 22 16:06:18 PDT 2020" starttimestamp="1603391273521" timestamp="16705057" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val listDerivedSafe = fn : int * int * int -> bool
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val printSafety = fn : (int * int * int -> bool) * (int * int * int) -> unitval curryableInterpolatedSafe =
                                                                              fn
                                                                              : 
                                                                                   int
                                                                                 -> 
                                                                                   int
                                                                                 -> 
                                                                                   int
                                                                                 -> 
                                                                                   bool
val curriedOnceInterpolatedSafe = fn : int -> int -> boolval curriedTwiceInterpolatedSafe =
                                                           fn : int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="305" _type="EHExceptionCommand" date="Thu Oct 22 16:06:27 PDT 2020" starttimestamp="1603391273521" timestamp="16714355" type="Exception">
    <outputString><![CDATA[printSafety;
]]></outputString>
  </Command>
  <Command __id="306" _type="EHExceptionCommand" date="Thu Oct 22 16:06:27 PDT 2020" starttimestamp="1603391273521" timestamp="16714411" type="Exception">
    <outputString><![CDATA[val it = fn : (int * int * int -> bool) * (int * int * int) -> unit
- ]]></outputString>
  </Command>
  <Command __id="307" _type="EHExceptionCommand" date="Thu Oct 22 16:06:42 PDT 2020" starttimestamp="1603391273521" timestamp="16728564" type="Exception">
    <outputString><![CDATA[val testFeatures = (28, 29, 29);
]]></outputString>
  </Command>
  <Command __id="308" _type="EHExceptionCommand" date="Thu Oct 22 16:06:42 PDT 2020" starttimestamp="1603391273521" timestamp="16728620" type="Exception">
    <outputString><![CDATA[val testFeatures = (28,29,29) : int * int * int
- ]]></outputString>
  </Command>
  <Command __id="309" _type="EHExceptionCommand" date="Thu Oct 22 16:06:51 PDT 2020" starttimestamp="1603391273521" timestamp="16738402" type="Exception">
    <outputString><![CDATA[printSafety(interpolatedSafe, testFeatures);
]]></outputString>
  </Command>
  <Command __id="310" _type="EHExceptionCommand" date="Thu Oct 22 16:06:51 PDT 2020" starttimestamp="1603391273521" timestamp="16738460" type="Exception">
    <outputString><![CDATA[Distance:28 Duration:29 Exhalation:29 Safe:false
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="350" _type="ShellCommand" date="Thu Oct 22 16:07:48 PDT 2020" starttimestamp="1603391273521" timestamp="16795421" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="352" _type="ShellCommand" date="Thu Oct 22 16:08:31 PDT 2020" starttimestamp="1603391273521" timestamp="16837793" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="353" _type="ShellCommand" date="Thu Oct 22 16:08:33 PDT 2020" starttimestamp="1603391273521" timestamp="16840454" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="354" _type="RunCommand" date="Thu Oct 22 16:08:34 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="16840506" type="Run" />
  <Command __id="355" _type="EHExceptionCommand" date="Thu Oct 22 16:08:34 PDT 2020" starttimestamp="1603391273521" timestamp="16840685" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val listDerivedSafe = fn : int * int * int -> bool
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val printSafety = fn : (int * int * int -> bool) * (int * int * int) -> unitval concisePrintSafety =
                                                                              fn
                                                                              : (
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  -> 
                                                                                    bool)
                                                                                 * (
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  * 
                                                                                    int)
                                                                                 -> unitval curryableInterpolatedSafe =
                                                                                          fn
                                                                                          : 
                                                                                               int
                                                                                             -> 
                                                                                               int
                                                                                             -> 
                                                                                               int
                                                                                             -> 
                                                                                               bool
val curriedOnceInterpolatedSafe = fn : int -> int -> boolval curriedTwiceInterpolatedSafe =
                                                           fn : int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="356" _type="EHExceptionCommand" date="Thu Oct 22 16:08:48 PDT 2020" starttimestamp="1603391273521" timestamp="16854788" type="Exception">
    <outputString><![CDATA[concisePrintSafety;
]]></outputString>
  </Command>
  <Command __id="357" _type="EHExceptionCommand" date="Thu Oct 22 16:08:48 PDT 2020" starttimestamp="1603391273521" timestamp="16854880" type="Exception">
    <outputString><![CDATA[val it = fn : (int * int * int -> bool) * (int * int * int) -> unit
- ]]></outputString>
  </Command>
  <Command __id="358" _type="EHExceptionCommand" date="Thu Oct 22 16:08:57 PDT 2020" starttimestamp="1603391273521" timestamp="16863669" type="Exception">
    <outputString><![CDATA[val testFeatures = (28, 29, 29);
]]></outputString>
  </Command>
  <Command __id="359" _type="EHExceptionCommand" date="Thu Oct 22 16:08:57 PDT 2020" starttimestamp="1603391273521" timestamp="16863761" type="Exception">
    <outputString><![CDATA[val testFeatures = (28,29,29) : int * int * int
- ]]></outputString>
  </Command>
  <Command __id="360" _type="EHExceptionCommand" date="Thu Oct 22 16:09:09 PDT 2020" starttimestamp="1603391273521" timestamp="16875660" type="Exception">
    <outputString><![CDATA[concisePrintSafety(interpolatedSafe, testFeatures);
]]></outputString>
  </Command>
  <Command __id="361" _type="EHExceptionCommand" date="Thu Oct 22 16:09:09 PDT 2020" starttimestamp="1603391273521" timestamp="16875753" type="Exception">
    <outputString><![CDATA[(28,29,29,false)
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="384" _type="ShellCommand" date="Thu Oct 22 16:11:10 PDT 2020" starttimestamp="1603391273521" timestamp="16997187" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="386" _type="ShellCommand" date="Thu Oct 22 16:14:31 PDT 2020" starttimestamp="1603391273521" timestamp="17197573" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="387" _type="ShellCommand" date="Thu Oct 22 16:14:34 PDT 2020" starttimestamp="1603391273521" timestamp="17201055" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="388" _type="RunCommand" date="Thu Oct 22 16:14:34 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="17201112" type="Run" />
  <Command __id="389" _type="EHExceptionCommand" date="Thu Oct 22 16:14:34 PDT 2020" starttimestamp="1603391273521" timestamp="17201289" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val listDerivedSafe = fn : int * int * int -> bool
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
SocialDistance.sml:89.3-90.53 Error: operator is not a function [circularity]
  operator: 'Z
  in expression:
    (printSafety (safetyComputer,(distance,duration,exhalation)))
      listPrintSafety

val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="390" _type="ShellCommand" date="Thu Oct 22 16:15:23 PDT 2020" starttimestamp="1603391273521" timestamp="17250446" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="391" _type="ShellCommand" date="Thu Oct 22 16:16:09 PDT 2020" starttimestamp="1603391273521" timestamp="17296307" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="393" _type="ShellCommand" date="Thu Oct 22 16:16:17 PDT 2020" starttimestamp="1603391273521" timestamp="17304254" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="394" _type="ShellCommand" date="Thu Oct 22 16:16:32 PDT 2020" starttimestamp="1603391273521" timestamp="17318665" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="395" _type="ShellCommand" date="Thu Oct 22 16:16:49 PDT 2020" starttimestamp="1603391273521" timestamp="17336329" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="403" _type="ShellCommand" date="Thu Oct 22 16:17:14 PDT 2020" starttimestamp="1603391273521" timestamp="17360821" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="406" _type="ShellCommand" date="Thu Oct 22 16:17:23 PDT 2020" starttimestamp="1603391273521" timestamp="17370471" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="407" _type="ShellCommand" date="Thu Oct 22 16:17:26 PDT 2020" starttimestamp="1603391273521" timestamp="17373372" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="408" _type="ShellCommand" date="Thu Oct 22 16:17:27 PDT 2020" starttimestamp="1603391273521" timestamp="17374263" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="409" _type="RunCommand" date="Thu Oct 22 16:17:27 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="17374295" type="Run" />
  <Command __id="410" _type="EHExceptionCommand" date="Thu Oct 22 16:17:27 PDT 2020" starttimestamp="1603391273521" timestamp="17374427" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val listDerivedSafe = fn : int * int * int -> bool
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
SocialDistance.sml:88.3-89.53 Error: operator is not a function [circularity]
  operator: 'Z
  in expression:
    (printSafety (safetyComputer,(distance,duration,exhalation)))
      listPrintSafety

val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="411" _type="ShellCommand" date="Thu Oct 22 16:17:30 PDT 2020" starttimestamp="1603391273521" timestamp="17377219" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="412" _type="ShellCommand" date="Thu Oct 22 16:17:55 PDT 2020" starttimestamp="1603391273521" timestamp="17401983" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="414" _type="ShellCommand" date="Thu Oct 22 16:18:03 PDT 2020" starttimestamp="1603391273521" timestamp="17410294" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="365" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 16:09:31 PDT 2020" docASTNodeCount="60" docActiveCodeLength="525" docExpressionCount="38" docLength="693" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="16898074">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3Tests/src/test/RunF20A3Tests.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package test;¶¶import grader.basics.execution.sml.SMLCommandGeneratorSelector;¶import gradingTools.comp524f20.assignment3.F20Assignment3Suite;¶//import trace.grader.basics.GraderBasicsTraceUtility;¶//import util.trace.Tracer;¶¶public class RunF20A3Tests {¶¶	static final String PROJECT_LOCATION = "/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3";¶	public static void main (String[] args) {¶		¶//		Tracer.showInfo(true);¶//		GraderBasicsTraceUtility.setBufferTracedMessages(false);	¶		F20Assignment3Suite.setProjectLocation(PROJECT_LOCATION);¶		SMLCommandGeneratorSelector.getCommandGenerator().setUserBinary("/usr/local/smlnj/bin/sml");¶		F20Assignment3Suite.main(args);¶¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="385" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 16:11:10 PDT 2020" docASTNodeCount="1" docActiveCodeLength="3833" docExpressionCount="0" docLength="3833" projectName="Assignment3" starttimestamp="1603391273521" timestamp="16997330">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun¶	derivedIteration (distance, duration, exhalation, nil) = false |¶	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =¶		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then¶			true¶		else¶			derivedIteration (distance, duration, exhalation, safetyTail);¶	¶fun listDerivedSafe (distance, duration, exhalation) =¶	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);¶	¶fun printSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")¶	end¶	¶"), Diff(INSERT,"fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")¶	end¶	¶"), Diff(EQUAL,"fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun
	derivedIteration (distance, duration, exhalation, nil) = false |
	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =
		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then
			true
		else
			derivedIteration (distance, duration, exhalation, safetyTail);
	
fun listDerivedSafe (distance, duration, exhalation) =
	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);
	
fun printSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")
	end
	
fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")
	end
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="392" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 16:16:09 PDT 2020" docASTNodeCount="1" docActiveCodeLength="4113" docExpressionCount="0" docLength="4113" projectName="Assignment3" starttimestamp="1603391273521" timestamp="17296384">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun¶	derivedIteration (distance, duration, exhalation, nil) = false |¶	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =¶		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then¶			true¶		else¶			derivedIteration (distance, duration, exhalation, safetyTail);¶	¶fun listDerivedSafe (distance, duration, exhalation) =¶	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);¶	¶fun printSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")¶	end¶	¶fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")¶	end¶	¶"), Diff(INSERT,"fun¶	listPrintSafety(printSafety, safetyComputer, nil) = () | ¶	listPrintSafety(printSafety, safetyComputer, ((distance, duration, exhalation) :: tail)) =¶	(¶		printSafety(safetyComputer, (distance, duration, exhalation))¶		listPrintSafety(printSafety, safetyComputer, tail)¶	)¶	¶"), Diff(EQUAL,"fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun
	derivedIteration (distance, duration, exhalation, nil) = false |
	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =
		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then
			true
		else
			derivedIteration (distance, duration, exhalation, safetyTail);
	
fun listDerivedSafe (distance, duration, exhalation) =
	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);
	
fun printSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")
	end
	
fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")
	end
	
fun
	listPrintSafety(printSafety, safetyComputer, nil) = () | 
	listPrintSafety(printSafety, safetyComputer, ((distance, duration, exhalation) :: tail)) =
	(
		printSafety(safetyComputer, (distance, duration, exhalation))
		listPrintSafety(printSafety, safetyComputer, tail)
	)
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="404" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 16:17:14 PDT 2020" docASTNodeCount="1" docActiveCodeLength="4107" docExpressionCount="0" docLength="4107" projectName="Assignment3" starttimestamp="1603391273521" timestamp="17360877">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun¶	derivedIteration (distance, duration, exhalation, nil) = false |¶	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =¶		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then¶			true¶		else¶			derivedIteration (distance, duration, exhalation, safetyTail);¶	¶fun listDerivedSafe (distance, duration, exhalation) =¶	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);¶	¶fun printSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")¶	end¶	¶fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")¶	end¶	¶fun¶	listPrintSafety(printSafety, safetyComputer, nil) = () | ¶	listPrintSafety(printSafety, safetyComputer, ((distance, duration, exhalation) :: tail)) =¶	"), Diff(DELETE,"(¶	"), Diff(EQUAL,"	printSafety(safetyComputer, (distance, duration, exhalation))¶		listPrintSafety(printSafety, safetyComputer, tail)¶	"), Diff(DELETE,")¶	"), Diff(EQUAL,"¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun
	derivedIteration (distance, duration, exhalation, nil) = false |
	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =
		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then
			true
		else
			derivedIteration (distance, duration, exhalation, safetyTail);
	
fun listDerivedSafe (distance, duration, exhalation) =
	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);
	
fun printSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")
	end
	
fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")
	end
	
fun
	listPrintSafety(printSafety, safetyComputer, nil) = () | 
	listPrintSafety(printSafety, safetyComputer, ((distance, duration, exhalation) :: tail)) =
		printSafety(safetyComputer, (distance, duration, exhalation))
		listPrintSafety(printSafety, safetyComputer, tail)
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="413" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 16:17:55 PDT 2020" docASTNodeCount="1" docActiveCodeLength="4108" docExpressionCount="0" docLength="4108" projectName="Assignment3" starttimestamp="1603391273521" timestamp="17402051">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun¶	derivedIteration (distance, duration, exhalation, nil) = false |¶	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =¶		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then¶			true¶		else¶			derivedIteration (distance, duration, exhalation, safetyTail);¶	¶fun listDerivedSafe (distance, duration, exhalation) =¶	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);¶	¶fun printSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")¶	end¶	¶fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")¶	end¶	¶fun¶	listPrintSafety(printSafety, safetyComputer, nil) = () | ¶	listPrintSafety(printSafety, safetyComputer, ((distance, duration, exhalation) :: tail)) =¶		printSafety(safetyComputer, (distance, duration, exhalation))¶		listPrintSafety(printSafety, safetyComputer, tail)"), Diff(INSERT,";"), Diff(EQUAL,"¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun
	derivedIteration (distance, duration, exhalation, nil) = false |
	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =
		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then
			true
		else
			derivedIteration (distance, duration, exhalation, safetyTail);
	
fun listDerivedSafe (distance, duration, exhalation) =
	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);
	
fun printSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")
	end
	
fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")
	end
	
fun
	listPrintSafety(printSafety, safetyComputer, nil) = () | 
	listPrintSafety(printSafety, safetyComputer, ((distance, duration, exhalation) :: tail)) =
		printSafety(safetyComputer, (distance, duration, exhalation))
		listPrintSafety(printSafety, safetyComputer, tail);
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="420" _type="RunCommand" date="Thu Oct 22 16:18:13 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="17420141" type="Run" />
  <Command __id="421" _type="ShellCommand" date="Thu Oct 22 16:18:18 PDT 2020" starttimestamp="1603391273521" timestamp="17425141" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="422" _type="ShellCommand" date="Thu Oct 22 16:18:19 PDT 2020" starttimestamp="1603391273521" timestamp="17426157" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="423" _type="RunCommand" date="Thu Oct 22 16:18:19 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="17426190" type="Run" />
  <Command __id="424" _type="ExceptionCommand" date="Thu Oct 22 16:18:19 PDT 2020" starttimestamp="1603391273521" timestamp="17426333" type="Exception">
    <exceptionString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val listDerivedSafe = fn : int * int * int -> bool
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val printSafety = fn : (int * int * int -> bool) * (int * int * int) -> unitval concisePrintSafety =
                                                                              fn
                                                                              : (
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  -> 
                                                                                    bool)
                                                                                 * (
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  * 
                                                                                    int)
                                                                                 -> unitval listPrintSafety =
                                                                                          fn
                                                                                          : ('a
                                                                                              * ('b
                                                                                               * 'c
                                                                                               * 'd)
                                                                                              -> unit)
                                                                                             * 'a
                                                                                             * ('b
                                                                                                * 'c
                                                                                                * 'd)
                                                                                               
                                                                                               list
                                                                                             -> unit
SocialDistance.sml:91.1-91.4 Error: syntax error: replacing  FUN with  EQUALOP

[unexpected exception: Compile]

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:19.24-19.46
             ../compiler/TopLevel/interact/evalloop.sml:45.54
             ../compiler/TopLevel/interact/evalloop.sml:306.20-306.23
             ../compiler/TopLevel/interact/interact.sml:65.13-65.16
- ]]></exceptionString>
  </Command>
  <Command __id="425" _type="ShellCommand" date="Thu Oct 22 16:18:34 PDT 2020" starttimestamp="1603391273521" timestamp="17440808" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="426" _type="ShellCommand" date="Thu Oct 22 16:18:47 PDT 2020" starttimestamp="1603391273521" timestamp="17453971" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="428" _type="ShellCommand" date="Thu Oct 22 16:19:05 PDT 2020" starttimestamp="1603391273521" timestamp="17471541" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="429" _type="ShellCommand" date="Thu Oct 22 16:19:05 PDT 2020" starttimestamp="1603391273521" timestamp="17472462" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="430" _type="RunCommand" date="Thu Oct 22 16:19:06 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="17472509" type="Run" />
  <Command __id="431" _type="EHExceptionCommand" date="Thu Oct 22 16:19:06 PDT 2020" starttimestamp="1603391273521" timestamp="17472622" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val listDerivedSafe = fn : int * int * int -> bool
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
]]></outputString>
  </Command>
  <Command __id="432" _type="EHExceptionCommand" date="Thu Oct 22 16:19:06 PDT 2020" starttimestamp="1603391273521" timestamp="17472640" type="Exception">
    <outputString><![CDATA[val printSafety = fn : (int * int * int -> bool) * (int * int * int) -> unitval concisePrintSafety =
                                                                              fn
                                                                              : (
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  -> 
                                                                                    bool)
                                                                                 * (
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  * 
                                                                                    int)
                                                                                 -> unitval listPrintSafety =
                                                                                          fn
                                                                                          : ('a
                                                                                              * ('b
                                                                                               * 'c
                                                                                               * 'd)
                                                                                              -> 'e)
                                                                                             * 'a
                                                                                             * ('b
                                                                                                * 'c
                                                                                                * 'd)
                                                                                               
                                                                                               list
                                                                                             -> unit
val curryableInterpolatedSafe = fn : int -> int -> int -> bool
val curriedOnceInterpolatedSafe = fn : int -> int -> boolval curriedTwiceInterpolatedSafe =
                                                           fn : int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="433" _type="ShellCommand" date="Thu Oct 22 16:19:10 PDT 2020" starttimestamp="1603391273521" timestamp="17476672" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="434" _type="ShellCommand" date="Thu Oct 22 16:19:13 PDT 2020" starttimestamp="1603391273521" timestamp="17480437" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="435" _type="EHExceptionCommand" date="Thu Oct 22 16:19:21 PDT 2020" starttimestamp="1603391273521" timestamp="17487516" type="Exception">
    <outputString><![CDATA[listPrintSafety;
]]></outputString>
  </Command>
  <Command __id="436" _type="EHExceptionCommand" date="Thu Oct 22 16:19:21 PDT 2020" starttimestamp="1603391273521" timestamp="17487570" type="Exception">
    <outputString><![CDATA[val it = fn : ('a * ('b * 'c * 'd) -> 'e) * 'a * ('b * 'c * 'd) list -> unit
- ]]></outputString>
  </Command>
  <Command __id="437" _type="EHExceptionCommand" date="Thu Oct 22 16:20:03 PDT 2020" starttimestamp="1603391273521" timestamp="17530303" type="Exception">
    <outputString><![CDATA[val testFeatures = [(13,30,30),(13,29,29),(13,31,31),(28,29,29)];
]]></outputString>
  </Command>
  <Command __id="438" _type="EHExceptionCommand" date="Thu Oct 22 16:20:03 PDT 2020" starttimestamp="1603391273521" timestamp="17530359" type="Exception">
    <outputString><![CDATA[val testFeatures = [(13,30,30),(13,29,29),(13,31,31),(28,29,29)]
  : (int * int * int) list
- ]]></outputString>
  </Command>
  <Command __id="439" _type="EHExceptionCommand" date="Thu Oct 22 16:20:20 PDT 2020" starttimestamp="1603391273521" timestamp="17546875" type="Exception">
    <outputString><![CDATA[listPrintSafety (printSafety, interpolatedSafe, testFeatures);
]]></outputString>
  </Command>
  <Command __id="440" _type="EHExceptionCommand" date="Thu Oct 22 16:20:20 PDT 2020" starttimestamp="1603391273521" timestamp="17546932" type="Exception">
    <outputString><![CDATA[Distance:13 Duration:30 Exhalation:30 Safe:true
Distance:13 Duration:29 Exhalation:29 Safe:true
Distance:13 Duration:31 Exhalation:31 Safe:false
Distance:28 Duration:29 Exhalation:29 Safe:false
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="441" _type="EHExceptionCommand" date="Thu Oct 22 16:20:43 PDT 2020" starttimestamp="1603391273521" timestamp="17570365" type="Exception">
    <outputString><![CDATA[listPrintSafety (concisePrintSafety, interpolatedSafe, testFeatures);
]]></outputString>
  </Command>
  <Command __id="442" _type="EHExceptionCommand" date="Thu Oct 22 16:20:43 PDT 2020" starttimestamp="1603391273521" timestamp="17570421" type="Exception">
    <outputString><![CDATA[(13,30,30,true)
(13,29,29,true)
(13,31,31,false)
(28,29,29,false)
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="443" _type="ShellCommand" date="Thu Oct 22 16:20:48 PDT 2020" starttimestamp="1603391273521" timestamp="17574993" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="444" _type="ShellCommand" date="Thu Oct 22 16:20:53 PDT 2020" starttimestamp="1603391273521" timestamp="17579503" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="445" _type="EHExceptionCommand" date="Thu Oct 22 16:20:54 PDT 2020" starttimestamp="1603391273521" timestamp="17580486" type="Exception">
    <outputString><![CDATA[
]]></outputString>
  </Command>
  <Command __id="446" _type="EHExceptionCommand" date="Thu Oct 22 16:20:54 PDT 2020" starttimestamp="1603391273521" timestamp="17580542" type="Exception">
    <outputString><![CDATA[Distance:13 Duration:30 Exhalation:30 Safe:true
Distance:13 Duration:29 Exhalation:29 Safe:true
Distance:13 Duration:31 Exhalation:31 Safe:false
Distance:28 Duration:29 Exhalation:29 Safe:true
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="447" _type="ShellCommand" date="Thu Oct 22 16:20:55 PDT 2020" starttimestamp="1603391273521" timestamp="17582263" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="448" _type="ShellCommand" date="Thu Oct 22 16:21:00 PDT 2020" starttimestamp="1603391273521" timestamp="17586986" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="418" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 16:18:09 PDT 2020" docASTNodeCount="1" docActiveCodeLength="4109" docExpressionCount="0" docLength="4109" projectName="Assignment3" starttimestamp="1603391273521" timestamp="17415840">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun¶	derivedIteration (distance, duration, exhalation, nil) = false |¶	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =¶		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then¶			true¶		else¶			derivedIteration (distance, duration, exhalation, safetyTail);¶	¶fun listDerivedSafe (distance, duration, exhalation) =¶	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);¶	¶fun printSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")¶	end¶	¶fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")¶	end¶	¶fun¶	listPrintSafety(printSafety, safetyComputer, nil) = () | ¶	listPrintSafety(printSafety, safetyComputer, ((distance, duration, exhalation) :: tail)) =¶		printSafety(safetyComputer, (distance, duration, exhalation))"), Diff(INSERT," ;"), Diff(EQUAL,"¶		listPrintSafety(printSafety, safetyComputer, tail)"), Diff(DELETE,";"), Diff(EQUAL,"¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun
	derivedIteration (distance, duration, exhalation, nil) = false |
	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =
		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then
			true
		else
			derivedIteration (distance, duration, exhalation, safetyTail);
	
fun listDerivedSafe (distance, duration, exhalation) =
	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);
	
fun printSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")
	end
	
fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")
	end
	
fun
	listPrintSafety(printSafety, safetyComputer, nil) = () | 
	listPrintSafety(printSafety, safetyComputer, ((distance, duration, exhalation) :: tail)) =
		printSafety(safetyComputer, (distance, duration, exhalation)) ;
		listPrintSafety(printSafety, safetyComputer, tail)
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="427" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 16:18:47 PDT 2020" docASTNodeCount="1" docActiveCodeLength="4110" docExpressionCount="0" docLength="4110" projectName="Assignment3" starttimestamp="1603391273521" timestamp="17454048">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun¶	derivedIteration (distance, duration, exhalation, nil) = false |¶	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =¶		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then¶			true¶		else¶			derivedIteration (distance, duration, exhalation, safetyTail);¶	¶fun listDerivedSafe (distance, duration, exhalation) =¶	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);¶	¶fun printSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")¶	end¶	¶fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")¶	end¶	¶fun¶	listPrintSafety(printSafety, safetyComputer, nil) = () | ¶	listPrintSafety(printSafety, safetyComputer, ((distance, duration, exhalation) :: tail)) =¶		printSafety(safetyComputer, (distance, duration, exhalation)) ;¶		listPrintSafety(printSafety, safetyComputer, tail)"), Diff(INSERT,";"), Diff(EQUAL,"¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun
	derivedIteration (distance, duration, exhalation, nil) = false |
	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =
		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then
			true
		else
			derivedIteration (distance, duration, exhalation, safetyTail);
	
fun listDerivedSafe (distance, duration, exhalation) =
	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);
	
fun printSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")
	end
	
fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")
	end
	
fun
	listPrintSafety(printSafety, safetyComputer, nil) = () | 
	listPrintSafety(printSafety, safetyComputer, ((distance, duration, exhalation) :: tail)) =
		printSafety(safetyComputer, (distance, duration, exhalation)) ;
		listPrintSafety(printSafety, safetyComputer, tail);
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="452" _type="RunCommand" date="Thu Oct 22 16:21:07 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="17594415" type="Run" />
  <Command __id="454" _type="ShellCommand" date="Thu Oct 22 16:22:23 PDT 2020" starttimestamp="1603391273521" timestamp="17670120" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="455" _type="ShellCommand" date="Thu Oct 22 16:22:25 PDT 2020" starttimestamp="1603391273521" timestamp="17671695" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="456" _type="RunCommand" date="Thu Oct 22 16:22:25 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="17671738" type="Run" />
  <Command __id="457" _type="EHExceptionCommand" date="Thu Oct 22 16:22:25 PDT 2020" starttimestamp="1603391273521" timestamp="17671887" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val listDerivedSafe = fn : int * int * int -> bool
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val printSafety = fn : (int * int * int -> bool) * (int * int * int) -> unitval concisePrintSafety =
                                                                              fn
                                                                              : (
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  -> 
                                                                                    bool)
                                                                                 * (
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  * 
                                                                                    int)
                                                                                 -> unitval printIterator =
                                                                                          fn
                                                                                          : ('a
                                                                                              * ('b
                                                                                               * 'c
                                                                                               * 'd)
                                                                                              -> 'e)
                                                                                             * 'a
                                                                                             * ('b
                                                                                                * 'c
                                                                                                * 'd)
                                                                                               
                                                                                               list
                                                                                             -> unit
val listPrintSafety = fn
  : ('a * ('b * 'c * 'd) -> 'e) * 'a * ('b * 'c * 'd) list -> unit
val curryableInterpolatedSafe = fn : int -> int -> int -> bool
val curriedOnceInterpolatedSafe = fn : int -> int -> boolval curriedTwiceInterpolatedSafe =
                                                           fn : int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="478" _type="RunCommand" date="Thu Oct 22 16:23:16 PDT 2020" kind="HitBreakPoint" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="17723211" type="Run" />
  <Command __id="479" _type="RunCommand" date="Thu Oct 22 16:23:16 PDT 2020" kind="HitBreakPoint" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="17723211" type="Run" />
  <Command __id="480" _type="ShellCommand" date="Thu Oct 22 16:23:16 PDT 2020" starttimestamp="1603391273521" timestamp="17723218" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="481" _type="ShellCommand" date="Thu Oct 22 16:23:21 PDT 2020" starttimestamp="1603391273521" timestamp="17727707" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="494" _type="ShellCommand" date="Thu Oct 22 16:39:02 PDT 2020" starttimestamp="1603391273521" timestamp="18668706" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="496" _type="ShellCommand" date="Thu Oct 22 16:40:15 PDT 2020" starttimestamp="1603391273521" timestamp="18741851" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="497" _type="ShellCommand" date="Thu Oct 22 16:44:03 PDT 2020" starttimestamp="1603391273521" timestamp="18969934" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="498" _type="ShellCommand" date="Thu Oct 22 16:45:14 PDT 2020" starttimestamp="1603391273521" timestamp="19040571" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="461" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 16:23:00 PDT 2020" docASTNodeCount="60" docActiveCodeLength="525" docExpressionCount="38" docLength="693" projectName="Assignment3Tests" starttimestamp="1603391273521" timestamp="17706951">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3Tests/src/test/RunF20A3Tests.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package test;¶¶import grader.basics.execution.sml.SMLCommandGeneratorSelector;¶import gradingTools.comp524f20.assignment3.F20Assignment3Suite;¶//import trace.grader.basics.GraderBasicsTraceUtility;¶//import util.trace.Tracer;¶¶public class RunF20A3Tests {¶¶	static final String PROJECT_LOCATION = "/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3";¶	public static void main (String[] args) {¶		¶//		Tracer.showInfo(true);¶//		GraderBasicsTraceUtility.setBufferTracedMessages(false);	¶		F20Assignment3Suite.setProjectLocation(PROJECT_LOCATION);¶		SMLCommandGeneratorSelector.getCommandGenerator().setUserBinary("/usr/local/smlnj/bin/sml");¶		F20Assignment3Suite.main(args);¶¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="495" _type="DiffBasedFileOpenCommand" date="Thu Oct 22 16:39:02 PDT 2020" docASTNodeCount="1" docActiveCodeLength="4235" docExpressionCount="0" docLength="4235" projectName="Assignment3" starttimestamp="1603391273521" timestamp="18668903">
    <filePath><![CDATA[/Users/rupinsharma/Desktop/College/Junior/COMP 524/Assignment3/SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"val SMALL_DISTANCE = 6;¶val MEDIUM_DISTANCE = 13;¶val LARGE_DISTANCE = 27;¶¶val SMALL_DURATION = 15;¶val MEDIUM_DURATION = 30;¶val LARGE_DURATION = 120;¶¶val SMALL_EXHALATION = 10;¶val MEDIUM_EXHALATION = 30;¶val LARGE_EXHALATION = 50;¶¶val MAX = 200;¶val ZERO = 0;¶¶val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];¶¶fun interpolateDistance(distance, low, medium, high) = ¶	if distance < low then ZERO else¶	if distance >= high then LARGE_DISTANCE else¶	if distance < high andalso distance >= medium then MEDIUM_DISTANCE¶	else SMALL_DISTANCE;¶¶fun interpolateDuration(duration, low, medium, high) =¶	if duration <= low then SMALL_DURATION else¶	if duration > high then MAX else¶	if duration > medium andalso duration <= high then LARGE_DURATION¶	else MEDIUM_DURATION;¶	¶fun interpolateExhalation(exhalation, low, medium, high) =¶	if exhalation <= low then SMALL_EXHALATION else¶	if exhalation > high then MAX else¶	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION¶	else MEDIUM_EXHALATION;¶¶fun givenSafe(distance, duration, exhalation) = ¶	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)¶	orelse¶	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)¶	orelse¶	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)¶	orelse¶	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);¶	¶fun interpolatedSafe(distance, duration, exhalation) = ¶	let ¶		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)¶		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)¶		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)¶	in¶		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)¶	end¶¶fun¶	derivedIteration (distance, duration, exhalation, nil) = false |¶	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =¶		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then¶			true¶		else¶			derivedIteration (distance, duration, exhalation, safetyTail);¶	¶fun listDerivedSafe (distance, duration, exhalation) =¶	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);¶	¶fun printSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")¶	end¶	¶fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =¶	let¶		val isSafe = safetyComputer(distance, duration, exhalation)	¶	in¶		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")¶	end¶	¶fun¶	"), Diff(DELETE,"listPrintSafety"), Diff(INSERT,"printIterator"), Diff(EQUAL,"(printSafety, safetyComputer, nil) = () | ¶	"), Diff(DELETE,"listPrintSafety"), Diff(INSERT,"printIterator"), Diff(EQUAL,"(printSafety, safetyComputer, ((distance, duration, exhalation) :: tail)) =¶	(	¶		printSafety(safetyComputer, (distance, duration, exhalation)) ;¶		"), Diff(DELETE,"listPrintSafety(printSafety, safetyComputer, tail)¶	"), Diff(INSERT,"printIterator(printSafety, safetyComputer, tail)¶	);¶	¶fun listPrintSafety(printSafety, safetyComputer, listToPrint) =¶	printIterator(printSafety, safetyComputer, listToPrint"), Diff(EQUAL,");¶	¶fun curryableInterpolatedSafe distance duration exhalation =¶	interpolatedSafe(distance, duration, exhalation);¶	¶fun curriedOnceInterpolatedSafe duration exhalation = ¶	let¶		val distance = MEDIUM_DISTANCE¶	in¶		curryableInterpolatedSafe distance duration exhalation¶	end¶	¶fun curriedTwiceInterpolatedSafe exhalation =¶	let¶		val duration = MEDIUM_DURATION¶	in¶		curriedOnceInterpolatedSafe duration exhalation¶	end¶		¶		¶	¶")]]]></diff>
    <snapshot><![CDATA[val SMALL_DISTANCE = 6;
val MEDIUM_DISTANCE = 13;
val LARGE_DISTANCE = 27;

val SMALL_DURATION = 15;
val MEDIUM_DURATION = 30;
val LARGE_DURATION = 120;

val SMALL_EXHALATION = 10;
val MEDIUM_EXHALATION = 30;
val LARGE_EXHALATION = 50;

val MAX = 200;
val ZERO = 0;

val SAFETY_TABLE = [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),(6,15,30)];

fun interpolateDistance(distance, low, medium, high) = 
	if distance < low then ZERO else
	if distance >= high then LARGE_DISTANCE else
	if distance < high andalso distance >= medium then MEDIUM_DISTANCE
	else SMALL_DISTANCE;

fun interpolateDuration(duration, low, medium, high) =
	if duration <= low then SMALL_DURATION else
	if duration > high then MAX else
	if duration > medium andalso duration <= high then LARGE_DURATION
	else MEDIUM_DURATION;
	
fun interpolateExhalation(exhalation, low, medium, high) =
	if exhalation <= low then SMALL_EXHALATION else
	if exhalation > high then MAX else
	if exhalation > medium andalso exhalation <= high then LARGE_EXHALATION
	else MEDIUM_EXHALATION;

fun givenSafe(distance, duration, exhalation) = 
	(distance = MEDIUM_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = MEDIUM_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = LARGE_EXHALATION)
	orelse
	(distance = MEDIUM_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = SMALL_EXHALATION)
	orelse
	(distance = LARGE_DISTANCE andalso duration = LARGE_DURATION andalso exhalation = MEDIUM_EXHALATION)
	orelse
	(distance = SMALL_DISTANCE andalso duration = SMALL_DURATION andalso exhalation = MEDIUM_EXHALATION);
	
fun interpolatedSafe(distance, duration, exhalation) = 
	let 
		val interpolatedDistance = interpolateDistance(distance, SMALL_DISTANCE, MEDIUM_DISTANCE, LARGE_DISTANCE)
		val interpolatedDuration = interpolateDuration(duration, SMALL_DURATION, MEDIUM_DURATION, LARGE_DURATION)
		val interpolatedExhalation = interpolateExhalation(exhalation, SMALL_EXHALATION, MEDIUM_EXHALATION, LARGE_EXHALATION)
	in
		givenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhalation)
	end

fun
	derivedIteration (distance, duration, exhalation, nil) = false |
	derivedIteration (distance, duration, exhalation, ((safeDist, safeDur, safeEx) :: safetyTail)) =
		if (distance >= safeDist andalso duration <= safeDur andalso exhalation <= safeEx) then
			true
		else
			derivedIteration (distance, duration, exhalation, safetyTail);
	
fun listDerivedSafe (distance, duration, exhalation) =
	derivedIteration(distance, duration, exhalation, SAFETY_TABLE);
	
fun printSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("Distance:"^Int.toString distance^" Duration:"^Int.toString duration^" Exhalation:"^Int.toString exhalation^" Safe:"^Bool.toString isSafe^"\n")
	end
	
fun concisePrintSafety (safetyComputer, (distance, duration, exhalation)) =
	let
		val isSafe = safetyComputer(distance, duration, exhalation)	
	in
		print ("("^Int.toString distance^","^Int.toString duration^","^Int.toString exhalation^","^Bool.toString isSafe^")\n")
	end
	
fun
	printIterator(printSafety, safetyComputer, nil) = () | 
	printIterator(printSafety, safetyComputer, ((distance, duration, exhalation) :: tail)) =
	(	
		printSafety(safetyComputer, (distance, duration, exhalation)) ;
		printIterator(printSafety, safetyComputer, tail)
	);
	
fun listPrintSafety(printSafety, safetyComputer, listToPrint) =
	printIterator(printSafety, safetyComputer, listToPrint);
	
fun curryableInterpolatedSafe distance duration exhalation =
	interpolatedSafe(distance, duration, exhalation);
	
fun curriedOnceInterpolatedSafe duration exhalation = 
	let
		val distance = MEDIUM_DISTANCE
	in
		curryableInterpolatedSafe distance duration exhalation
	end
	
fun curriedTwiceInterpolatedSafe exhalation =
	let
		val duration = MEDIUM_DURATION
	in
		curriedOnceInterpolatedSafe duration exhalation
	end
		
		
	
]]></snapshot>
  </Command>
  <Command __id="499" _type="ShellCommand" date="Thu Oct 22 16:52:11 PDT 2020" starttimestamp="1603391273521" timestamp="19458197" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="500" _type="RunCommand" date="Thu Oct 22 16:52:11 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="19458395" type="Run" />
  <Command __id="502" _type="ShellCommand" date="Thu Oct 22 16:52:21 PDT 2020" starttimestamp="1603391273521" timestamp="19467512" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="503" _type="ShellCommand" date="Thu Oct 22 16:52:22 PDT 2020" starttimestamp="1603391273521" timestamp="19469411" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="504" _type="RunCommand" date="Thu Oct 22 16:52:22 PDT 2020" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1603391273521" timestamp="19469473" type="Run" />
  <Command __id="505" _type="EHExceptionCommand" date="Thu Oct 22 16:52:23 PDT 2020" starttimestamp="1603391273521" timestamp="19469607" type="Exception">
    <outputString><![CDATA[Standard ML of New Jersey (64-bit) v110.98 [built: Thu Jul 16 21:55:53 2020]
- [opening SocialDistance.sml]
val SMALL_DISTANCE = 6 : int
val MEDIUM_DISTANCE = 13 : int
val LARGE_DISTANCE = 27 : int
val SMALL_DURATION = 15 : int
val MEDIUM_DURATION = 30 : int
val LARGE_DURATION = 120 : int
val SMALL_EXHALATION = 10 : int
val MEDIUM_EXHALATION = 30 : int
val LARGE_EXHALATION = 50 : int
val MAX = 200 : int
val ZERO = 0 : int
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list
val interpolateDistance = fn : int * int * int * int -> int
val interpolateDuration = fn : int * int * int * int -> int
val interpolateExhalation = fn : int * int * int * int -> int
val givenSafe = fn : int * int * int -> bool
val interpolatedSafe = fn : int * int * int -> boolval derivedIteration = fn
                                                     : int * int * int
                                                        * (int * int * int) 
                                                          list
                                                        -> bool
val listDerivedSafe = fn : int * int * int -> bool
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val printSafety = fn : (int * int * int -> bool) * (int * int * int) -> unitval concisePrintSafety =
                                                                              fn
                                                                              : (
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  -> 
                                                                                    bool)
                                                                                 * (
                                                                                    int
                                                                                  * 
                                                                                    int
                                                                                  * 
                                                                                    int)
                                                                                 -> unitval printIterator =
                                                                                          fn
                                                                                          : ('a
                                                                                              * ('b
                                                                                               * 'c
                                                                                               * 'd)
                                                                                              -> 'e)
                                                                                             * 'a
                                                                                             * ('b
                                                                                                * 'c
                                                                                                * 'd)
                                                                                               
                                                                                               list
                                                                                             -> unit
val listPrintSafety = fn
  : ('a * ('b * 'c * 'd) -> 'e) * 'a * ('b * 'c * 'd) list -> unit
val curryableInterpolatedSafe = fn : int -> int -> int -> bool
]]></outputString>
  </Command>
  <Command __id="506" _type="EHExceptionCommand" date="Thu Oct 22 16:52:23 PDT 2020" starttimestamp="1603391273521" timestamp="19469666" type="Exception">
    <outputString><![CDATA[val curriedOnceInterpolatedSafe = fn : int -> int -> boolval curriedTwiceInterpolatedSafe =
                                                           fn : int -> bool
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="507" _type="EHExceptionCommand" date="Thu Oct 22 16:52:33 PDT 2020" starttimestamp="1603391273521" timestamp="19480405" type="Exception">
    <outputString><![CDATA[givenSafe;
]]></outputString>
  </Command>
  <Command __id="508" _type="EHExceptionCommand" date="Thu Oct 22 16:52:33 PDT 2020" starttimestamp="1603391273521" timestamp="19480461" type="Exception">
    <outputString><![CDATA[val it = fn : int * int * int -> bool
- ]]></outputString>
  </Command>
  <Command __id="509" _type="EHExceptionCommand" date="Thu Oct 22 16:52:39 PDT 2020" starttimestamp="1603391273521" timestamp="19486060" type="Exception">
    <outputString><![CDATA[givenSafe(13,30,30);
]]></outputString>
  </Command>
  <Command __id="510" _type="EHExceptionCommand" date="Thu Oct 22 16:52:39 PDT 2020" starttimestamp="1603391273521" timestamp="19486114" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
  <Command __id="511" _type="EHExceptionCommand" date="Thu Oct 22 16:52:44 PDT 2020" starttimestamp="1603391273521" timestamp="19491179" type="Exception">
    <outputString><![CDATA[givenSafe(13,29,29);
]]></outputString>
  </Command>
  <Command __id="512" _type="EHExceptionCommand" date="Thu Oct 22 16:52:44 PDT 2020" starttimestamp="1603391273521" timestamp="19491235" type="Exception">
    <outputString><![CDATA[val it = false : bool
- ]]></outputString>
  </Command>
  <Command __id="513" _type="EHExceptionCommand" date="Thu Oct 22 16:52:47 PDT 2020" starttimestamp="1603391273521" timestamp="19494303" type="Exception">
    <outputString><![CDATA[interpolatedSafe;
]]></outputString>
  </Command>
  <Command __id="514" _type="EHExceptionCommand" date="Thu Oct 22 16:52:47 PDT 2020" starttimestamp="1603391273521" timestamp="19494359" type="Exception">
    <outputString><![CDATA[val it = fn : int * int * int -> bool
- ]]></outputString>
  </Command>
  <Command __id="515" _type="EHExceptionCommand" date="Thu Oct 22 16:52:53 PDT 2020" starttimestamp="1603391273521" timestamp="19500403" type="Exception">
    <outputString><![CDATA[interpolatedSafe(13,29,29);
]]></outputString>
  </Command>
  <Command __id="516" _type="EHExceptionCommand" date="Thu Oct 22 16:52:54 PDT 2020" starttimestamp="1603391273521" timestamp="19500501" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
  <Command __id="517" _type="EHExceptionCommand" date="Thu Oct 22 16:53:00 PDT 2020" starttimestamp="1603391273521" timestamp="19506599" type="Exception">
    <outputString><![CDATA[interpolatedSafe(12,29,29);
]]></outputString>
  </Command>
  <Command __id="518" _type="EHExceptionCommand" date="Thu Oct 22 16:53:00 PDT 2020" starttimestamp="1603391273521" timestamp="19506688" type="Exception">
    <outputString><![CDATA[val it = false : bool
- ]]></outputString>
  </Command>
  <Command __id="519" _type="EHExceptionCommand" date="Thu Oct 22 16:53:06 PDT 2020" starttimestamp="1603391273521" timestamp="19513321" type="Exception">
    <outputString><![CDATA[interpolatedSafe(28,30,30);
]]></outputString>
  </Command>
  <Command __id="520" _type="EHExceptionCommand" date="Thu Oct 22 16:53:06 PDT 2020" starttimestamp="1603391273521" timestamp="19513414" type="Exception">
    <outputString><![CDATA[val it = false : bool
- ]]></outputString>
  </Command>
  <Command __id="521" _type="EHExceptionCommand" date="Thu Oct 22 16:53:14 PDT 2020" starttimestamp="1603391273521" timestamp="19520590" type="Exception">
    <outputString><![CDATA[listDerivedSafe;
]]></outputString>
  </Command>
  <Command __id="522" _type="EHExceptionCommand" date="Thu Oct 22 16:53:14 PDT 2020" starttimestamp="1603391273521" timestamp="19520679" type="Exception">
    <outputString><![CDATA[val it = fn : int * int * int -> bool
- ]]></outputString>
  </Command>
  <Command __id="523" _type="EHExceptionCommand" date="Thu Oct 22 16:53:19 PDT 2020" starttimestamp="1603391273521" timestamp="19526435" type="Exception">
    <outputString><![CDATA[listDerivedSafe(13,29,29);
]]></outputString>
  </Command>
  <Command __id="524" _type="EHExceptionCommand" date="Thu Oct 22 16:53:20 PDT 2020" starttimestamp="1603391273521" timestamp="19526577" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
  <Command __id="525" _type="EHExceptionCommand" date="Thu Oct 22 16:53:25 PDT 2020" starttimestamp="1603391273521" timestamp="19532337" type="Exception">
    <outputString><![CDATA[listDerivedSafe(13,31,31);
]]></outputString>
  </Command>
  <Command __id="526" _type="EHExceptionCommand" date="Thu Oct 22 16:53:25 PDT 2020" starttimestamp="1603391273521" timestamp="19532390" type="Exception">
    <outputString><![CDATA[val it = false : bool
- ]]></outputString>
  </Command>
  <Command __id="527" _type="EHExceptionCommand" date="Thu Oct 22 16:53:32 PDT 2020" starttimestamp="1603391273521" timestamp="19538565" type="Exception">
    <outputString><![CDATA[listDerivedSafe(28,30,30);
]]></outputString>
  </Command>
  <Command __id="528" _type="EHExceptionCommand" date="Thu Oct 22 16:53:32 PDT 2020" starttimestamp="1603391273521" timestamp="19538640" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
  <Command __id="529" _type="EHExceptionCommand" date="Thu Oct 22 16:53:38 PDT 2020" starttimestamp="1603391273521" timestamp="19545378" type="Exception">
    <outputString><![CDATA[printSafety;
]]></outputString>
  </Command>
  <Command __id="530" _type="EHExceptionCommand" date="Thu Oct 22 16:53:38 PDT 2020" starttimestamp="1603391273521" timestamp="19545467" type="Exception">
    <outputString><![CDATA[val it = fn : (int * int * int -> bool) * (int * int * int) -> unit
- ]]></outputString>
  </Command>
  <Command __id="531" _type="EHExceptionCommand" date="Thu Oct 22 16:53:49 PDT 2020" starttimestamp="1603391273521" timestamp="19555521" type="Exception">
    <outputString><![CDATA[val testFeatures = (28,29,29);
]]></outputString>
  </Command>
  <Command __id="532" _type="EHExceptionCommand" date="Thu Oct 22 16:53:49 PDT 2020" starttimestamp="1603391273521" timestamp="19555576" type="Exception">
    <outputString><![CDATA[val testFeatures = (28,29,29) : int * int * int
- ]]></outputString>
  </Command>
  <Command __id="533" _type="EHExceptionCommand" date="Thu Oct 22 16:53:59 PDT 2020" starttimestamp="1603391273521" timestamp="19566321" type="Exception">
    <outputString><![CDATA[printSafety(interpolatedSafe, testFeatures);
]]></outputString>
  </Command>
  <Command __id="534" _type="EHExceptionCommand" date="Thu Oct 22 16:53:59 PDT 2020" starttimestamp="1603391273521" timestamp="19566378" type="Exception">
    <outputString><![CDATA[Distance:28 Duration:29 Exhalation:29 Safe:false
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="535" _type="EHExceptionCommand" date="Thu Oct 22 16:54:12 PDT 2020" starttimestamp="1603391273521" timestamp="19578521" type="Exception">
    <outputString><![CDATA[printSafety(listDerivedSafe, testFeatures);
]]></outputString>
  </Command>
  <Command __id="536" _type="EHExceptionCommand" date="Thu Oct 22 16:54:12 PDT 2020" starttimestamp="1603391273521" timestamp="19578609" type="Exception">
    <outputString><![CDATA[Distance:28 Duration:29 Exhalation:29 Safe:true
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="537" _type="EHExceptionCommand" date="Thu Oct 22 16:54:21 PDT 2020" starttimestamp="1603391273521" timestamp="19587577" type="Exception">
    <outputString><![CDATA[concisePrintSafety;
]]></outputString>
  </Command>
  <Command __id="538" _type="EHExceptionCommand" date="Thu Oct 22 16:54:21 PDT 2020" starttimestamp="1603391273521" timestamp="19587630" type="Exception">
    <outputString><![CDATA[val it = fn : (int * int * int -> bool) * (int * int * int) -> unit
- ]]></outputString>
  </Command>
  <Command __id="539" _type="EHExceptionCommand" date="Thu Oct 22 16:54:30 PDT 2020" starttimestamp="1603391273521" timestamp="19596870" type="Exception">
    <outputString><![CDATA[val testFeatures(28,29,29);
]]></outputString>
  </Command>
  <Command __id="540" _type="EHExceptionCommand" date="Thu Oct 22 16:54:34 PDT 2020" starttimestamp="1603391273521" timestamp="19600932" type="Exception">
    <outputString><![CDATA[= ;
]]></outputString>
  </Command>
  <Command __id="541" _type="EHExceptionCommand" date="Thu Oct 22 16:54:42 PDT 2020" starttimestamp="1603391273521" timestamp="19609125" type="Exception">
    <outputString><![CDATA[= val testFeatures - (28,29,29);
]]></outputString>
  </Command>
  <Command __id="542" _type="EHExceptionCommand" date="Thu Oct 22 16:54:42 PDT 2020" starttimestamp="1603391273521" timestamp="19609216" type="Exception">
    <outputString><![CDATA[stdIn:18.27-20.4 Error: syntax error: deleting  SEMICOLON SEMICOLON VAL

- ]]></outputString>
  </Command>
  <Command __id="543" _type="EHExceptionCommand" date="Thu Oct 22 16:54:54 PDT 2020" starttimestamp="1603391273521" timestamp="19620739" type="Exception">
    <outputString><![CDATA[val testFeatures = (28, 29,29);
]]></outputString>
  </Command>
  <Command __id="544" _type="EHExceptionCommand" date="Thu Oct 22 16:54:54 PDT 2020" starttimestamp="1603391273521" timestamp="19620831" type="Exception">
    <outputString><![CDATA[val testFeatures = (28,29,29) : int * int * int
- ]]></outputString>
  </Command>
  <Command __id="545" _type="EHExceptionCommand" date="Thu Oct 22 16:55:06 PDT 2020" starttimestamp="1603391273521" timestamp="19632555" type="Exception">
    <outputString><![CDATA[concisePrintSafety(interpolatedSafe, testFeatures);
]]></outputString>
  </Command>
  <Command __id="546" _type="EHExceptionCommand" date="Thu Oct 22 16:55:06 PDT 2020" starttimestamp="1603391273521" timestamp="19632619" type="Exception">
    <outputString><![CDATA[(28,29,29,false)
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="547" _type="EHExceptionCommand" date="Thu Oct 22 16:55:23 PDT 2020" starttimestamp="1603391273521" timestamp="19649517" type="Exception">
    <outputString><![CDATA[concisePrintSafety(listDerivedSafe, testFeatures);
]]></outputString>
  </Command>
  <Command __id="548" _type="EHExceptionCommand" date="Thu Oct 22 16:55:23 PDT 2020" starttimestamp="1603391273521" timestamp="19649620" type="Exception">
    <outputString><![CDATA[(28,29,29,true)
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="549" _type="EHExceptionCommand" date="Thu Oct 22 16:55:33 PDT 2020" starttimestamp="1603391273521" timestamp="19659673" type="Exception">
    <outputString><![CDATA[listPrintSafety;
]]></outputString>
  </Command>
  <Command __id="550" _type="EHExceptionCommand" date="Thu Oct 22 16:55:33 PDT 2020" starttimestamp="1603391273521" timestamp="19659761" type="Exception">
    <outputString><![CDATA[val it = fn : ('a * ('b * 'c * 'd) -> 'e) * 'a * ('b * 'c * 'd) list -> unit
- ]]></outputString>
  </Command>
  <Command __id="551" _type="ShellCommand" date="Thu Oct 22 16:55:38 PDT 2020" starttimestamp="1603391273521" timestamp="19665451" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="552" _type="ShellCommand" date="Thu Oct 22 16:55:43 PDT 2020" starttimestamp="1603391273521" timestamp="19669633" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="553" _type="EHExceptionCommand" date="Thu Oct 22 16:55:44 PDT 2020" starttimestamp="1603391273521" timestamp="19671431" type="Exception">
    <outputString><![CDATA[val testFeatures = [(13,30,30),(13,29,29),(13,31,31),(28,29,29)]
  : (int * int * int) list
- ]]></outputString>
  </Command>
  <Command __id="554" _type="EHExceptionCommand" date="Thu Oct 22 16:55:56 PDT 2020" starttimestamp="1603391273521" timestamp="19682654" type="Exception">
    <outputString><![CDATA[listPrint val testFeatures = [(13, 30, 30), (13, 29, 29), (13, 31, 31), (28, 29, 29)];
listPrintSafety(printSafety, interpolatedSafe, testFeatures);
]]></outputString>
  </Command>
  <Command __id="555" _type="EHExceptionCommand" date="Thu Oct 22 16:55:56 PDT 2020" starttimestamp="1603391273521" timestamp="19682739" type="Exception">
    <outputString><![CDATA[Distance:13 Duration:30 Exhalation:30 Safe:true
Distance:13 Duration:29 Exhalation:29 Safe:true
Distance:13 Duration:31 Exhalation:31 Safe:false
Distance:28 Duration:29 Exhalation:29 Safe:false
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="556" _type="EHExceptionCommand" date="Thu Oct 22 16:56:13 PDT 2020" starttimestamp="1603391273521" timestamp="19700280" type="Exception">
    <outputString><![CDATA[listPrintSafety(concisePrintSafety, interpolatedSafe, testFeatures);
]]></outputString>
  </Command>
  <Command __id="557" _type="EHExceptionCommand" date="Thu Oct 22 16:56:13 PDT 2020" starttimestamp="1603391273521" timestamp="19700420" type="Exception">
    <outputString><![CDATA[(13,30,30,true)
(13,29,29,true)
(13,31,31,false)
(28,29,29,false)
val it = () : unit
- ]]></outputString>
  </Command>
  <Command __id="558" _type="EHExceptionCommand" date="Thu Oct 22 16:56:23 PDT 2020" starttimestamp="1603391273521" timestamp="19709742" type="Exception">
    <outputString><![CDATA[curryableInterpolatedSafe;
]]></outputString>
  </Command>
  <Command __id="559" _type="EHExceptionCommand" date="Thu Oct 22 16:56:23 PDT 2020" starttimestamp="1603391273521" timestamp="19709831" type="Exception">
    <outputString><![CDATA[val it = fn : int -> int -> int -> bool
- ]]></outputString>
  </Command>
  <Command __id="560" _type="EHExceptionCommand" date="Thu Oct 22 16:56:30 PDT 2020" starttimestamp="1603391273521" timestamp="19717358" type="Exception">
    <outputString><![CDATA[curryableInterpolatedSafe 13 30 30;
]]></outputString>
  </Command>
  <Command __id="561" _type="EHExceptionCommand" date="Thu Oct 22 16:56:30 PDT 2020" starttimestamp="1603391273521" timestamp="19717447" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
  <Command __id="562" _type="EHExceptionCommand" date="Thu Oct 22 16:56:38 PDT 2020" starttimestamp="1603391273521" timestamp="19724499" type="Exception">
    <outputString><![CDATA[curryableInterpolatedSafe 13 29 29;
]]></outputString>
  </Command>
  <Command __id="563" _type="EHExceptionCommand" date="Thu Oct 22 16:56:38 PDT 2020" starttimestamp="1603391273521" timestamp="19724581" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
  <Command __id="564" _type="EHExceptionCommand" date="Thu Oct 22 16:56:44 PDT 2020" starttimestamp="1603391273521" timestamp="19730607" type="Exception">
    <outputString><![CDATA[curriedOnceInterpolatedSafe;
]]></outputString>
  </Command>
  <Command __id="565" _type="EHExceptionCommand" date="Thu Oct 22 16:56:44 PDT 2020" starttimestamp="1603391273521" timestamp="19730664" type="Exception">
    <outputString><![CDATA[val it = fn : int -> int -> bool
- ]]></outputString>
  </Command>
  <Command __id="566" _type="EHExceptionCommand" date="Thu Oct 22 16:56:50 PDT 2020" starttimestamp="1603391273521" timestamp="19737013" type="Exception">
    <outputString><![CDATA[curriedOnceInterpolatedSafe 30 30
]]></outputString>
  </Command>
  <Command __id="567" _type="EHExceptionCommand" date="Thu Oct 22 16:56:51 PDT 2020" starttimestamp="1603391273521" timestamp="19738368" type="Exception">
    <outputString><![CDATA[= ;
]]></outputString>
  </Command>
  <Command __id="568" _type="EHExceptionCommand" date="Thu Oct 22 16:56:51 PDT 2020" starttimestamp="1603391273521" timestamp="19738473" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
  <Command __id="569" _type="EHExceptionCommand" date="Thu Oct 22 16:56:58 PDT 2020" starttimestamp="1603391273521" timestamp="19744774" type="Exception">
    <outputString><![CDATA[curriedOnceInterpolatedSafe 29 29;
]]></outputString>
  </Command>
  <Command __id="570" _type="EHExceptionCommand" date="Thu Oct 22 16:56:58 PDT 2020" starttimestamp="1603391273521" timestamp="19744828" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
  <Command __id="571" _type="EHExceptionCommand" date="Thu Oct 22 16:57:04 PDT 2020" starttimestamp="1603391273521" timestamp="19750914" type="Exception">
    <outputString><![CDATA[curriedOnceInterpolatedSafe 31 31;
]]></outputString>
  </Command>
  <Command __id="572" _type="EHExceptionCommand" date="Thu Oct 22 16:57:04 PDT 2020" starttimestamp="1603391273521" timestamp="19751007" type="Exception">
    <outputString><![CDATA[val it = false : bool
- ]]></outputString>
  </Command>
  <Command __id="573" _type="EHExceptionCommand" date="Thu Oct 22 16:57:12 PDT 2020" starttimestamp="1603391273521" timestamp="19759118" type="Exception">
    <outputString><![CDATA[curriedTwiceInterpolatedSafe;
]]></outputString>
  </Command>
  <Command __id="574" _type="EHExceptionCommand" date="Thu Oct 22 16:57:12 PDT 2020" starttimestamp="1603391273521" timestamp="19759257" type="Exception">
    <outputString><![CDATA[val it = fn : int -> bool
- ]]></outputString>
  </Command>
  <Command __id="575" _type="EHExceptionCommand" date="Thu Oct 22 16:57:19 PDT 2020" starttimestamp="1603391273521" timestamp="19765793" type="Exception">
    <outputString><![CDATA[curriedTwiceInterpolatedSafe 29;
]]></outputString>
  </Command>
  <Command __id="576" _type="EHExceptionCommand" date="Thu Oct 22 16:57:19 PDT 2020" starttimestamp="1603391273521" timestamp="19765850" type="Exception">
    <outputString><![CDATA[val it = true : bool
- ]]></outputString>
  </Command>
</Events>
